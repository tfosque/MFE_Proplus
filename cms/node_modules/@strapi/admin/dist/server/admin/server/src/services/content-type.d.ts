/**
 * Creates an array of paths to the fields and nested fields, without path nodes
 * @param {string} model model used to get the nested fields
 * @param {Object} options
 * @param {string} options.prefix prefix to add to the path
 * @param {number} options.nestingLevel level of nesting to achieve
 * @param {object} options.components components where components attributes can be found
 * @param {object} options.requiredOnly only returns required nestedFields
 * @param {object} options.existingFields fields that are already selected, meaning that some sub-fields may be required
 * @returns {array<string>}
 * @param model
 */
declare const getNestedFields: (model: any, { prefix, nestingLevel, components, requiredOnly, existingFields }: {
    prefix?: string | undefined;
    nestingLevel?: number | undefined;
    components?: {} | undefined;
    requiredOnly?: boolean | undefined;
    existingFields?: never[] | undefined;
}) => any;
/**
 * Creates an array of paths to the fields and nested fields, with path nodes
 * @param {string} model model used to get the nested fields
 * @param {Object} options
 * @param {string} options.prefix prefix to add to the path
 * @param {number} options.nestingLevel level of nesting to achieve
 * @param {object} options.components components where components attributes can be found
 * @returns {array<string>}
 */
declare const getNestedFieldsWithIntermediate: (model: any, { prefix, nestingLevel, components }: {
    prefix?: string | undefined;
    nestingLevel?: number | undefined;
    components?: {} | undefined;
}) => any;
/**
 * Creates an array of permissions with the "properties.fields" attribute filled
 * @param {array} actions array of actions
 * @param {object} options
 * @param {number} options.nestingLevel level of nesting
 * @param {array} options.restrictedSubjects subjectsId to ignore
 * @returns {Permission[]}
 */
declare const getPermissionsWithNestedFields: (actions: any[], { nestingLevel, restrictedSubjects }?: any) => any;
/**
 * Cleans permissions' fields (add required ones, remove the non-existing ones)
 * @param {Permission[]} permissions array of existing permissions in db
 * @param {object} options
 * @param {number} options.nestingLevel level of nesting
 * @returns {Permission[]}
 */
declare const cleanPermissionFields: (permissions: any, { nestingLevel }?: any) => any;
export { getNestedFields, getPermissionsWithNestedFields, cleanPermissionFields, getNestedFieldsWithIntermediate, };
