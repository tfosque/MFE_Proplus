/**
 * Remove private user fields
 * @param {Object} user - user to sanitize
 */
declare const sanitizeUser: (user: any) => {
    roles: any;
};
/**
 * Create and save a user in database
 * @param attributes A partial user object
 * @returns {Promise<user>}
 */
declare const create: (attributes: any) => Promise<any>;
/**
 * Update a user in database
 * @param id query params to find the user to update
 * @param attributes A partial user object
 * @returns {Promise<user>}
 */
declare const updateById: (id: any, attributes: any) => Promise<any>;
/**
 * Reset a user password by email. (Used in admin:reset CLI)
 * @param {string} email - user email
 * @param {string} password - new password
 */
declare const resetPasswordByEmail: (email: string, password: string) => Promise<void>;
/**
 * Check if a user with specific attributes exists in the database
 * @param attributes A partial user object
 * @returns {Promise<boolean>}
 */
declare const exists: (attributes?: {}) => Promise<boolean>;
/**
 * Returns a user registration info
 * @param {string} registrationToken - a user registration token
 * @returns {Promise<registrationInfo>} - Returns user email, firstname and lastname
 */
declare const findRegistrationInfo: (registrationToken: string) => Promise<Pick<any, "email" | "firstname" | "lastname"> | undefined>;
/**
 * Registers a user based on a registrationToken and some informations to update
 * @param {Object} params
 * @param {Object} params.registrationToken registration token
 * @param {Object} params.userInfo user info
 */
declare const register: ({ registrationToken, userInfo }: any) => Promise<any>;
/**
 * Find one user
 */
declare const findOne: (id: any, populate?: string[]) => Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"admin::user", string> | null>;
/**
 * Find one user by its email
 * @param {string} id  email
 * @param {string || string[] || object} populate
 * @returns
 */
declare const findOneByEmail: (email: string, populate?: never[]) => Promise<any>;
/** Find many users (paginated)
 * @param query
 * @returns {Promise<user>}
 */
declare const findPage: (query?: {}) => Promise<import("@strapi/types/dist/modules/entity-service").PaginatedResult<"admin::user", {
    populate: string[];
}>>;
/** Delete a user
 * @param id id of the user to delete
 * @returns {Promise<user>}
 */
declare const deleteById: (id: any) => Promise<any>;
/** Delete a user
 * @param ids ids of the users to delete
 * @returns {Promise<user>}
 */
declare const deleteByIds: (ids: any[]) => Promise<any[]>;
/** Count the users that don't have any associated roles
 * @returns {Promise<number>}
 */
declare const countUsersWithoutRole: () => Promise<number>;
/**
 * Count the number of users based on search params
 * @param params params used for the query
 * @returns {Promise<number>}
 */
declare const count: (where?: {}) => Promise<number>;
/** Assign some roles to several users
 * @returns {undefined}
 */
declare const assignARoleToAll: (roleId: any) => Promise<void>;
/** Display a warning if some users don't have at least one role
 * @returns {Promise<>}
 */
declare const displayWarningIfUsersDontHaveRole: () => Promise<void>;
/** Returns an array of interface languages currently used by users
 * @returns {Promise<Array<string>>}
 */
declare const getLanguagesInUse: () => Promise<any[]>;
export { create, updateById, exists, findRegistrationInfo, register, sanitizeUser, findOne, findOneByEmail, findPage, deleteById, deleteByIds, countUsersWithoutRole, count, assignARoleToAll, displayWarningIfUsersDontHaveRole, resetPasswordByEmail, getLanguagesInUse, };
