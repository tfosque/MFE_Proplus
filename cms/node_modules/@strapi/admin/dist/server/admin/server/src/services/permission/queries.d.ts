/**
 * Delete permissions of roles in database
 * @param rolesIds ids of roles
 * @returns {Promise<array>}
 */
export declare const deleteByRolesIds: (rolesIds: string[]) => Promise<void>;
/**
 * Delete permissions
 * @param ids ids of permissions
 * @returns {Promise<array>}
 */
export declare const deleteByIds: (ids: string[]) => Promise<void>;
/**
 * Create many permissions
 * @param permissions
 * @returns {Promise<*[]|*>}
 */
export declare const createMany: (permissions: any) => Promise<import("../../domain/permission/index").Permission>;
/**
 * Find assigned permissions in the database
 * @param params query params to find the permissions
 * @returns {Promise<Permission[]>}
 */
export declare const findMany: (params?: {}) => Promise<import("../../domain/permission/index").Permission>;
/**
 * Find all permissions for a user
 * @param user - user
 * @returns {Promise<Permission[]>}
 */
export declare const findUserPermissions: (user: any) => Promise<import("../../domain/permission/index").Permission>;
/**
 * Removes permissions in database that don't exist anymore
 * @returns {Promise<>}
 */
export declare const cleanPermissionsInDatabase: () => Promise<void>;
declare const _default: {
    createMany: (permissions: any) => Promise<import("../../domain/permission/index").Permission>;
    findMany: (params?: {}) => Promise<import("../../domain/permission/index").Permission>;
    deleteByRolesIds: (rolesIds: string[]) => Promise<void>;
    deleteByIds: (ids: string[]) => Promise<void>;
    findUserPermissions: (user: any) => Promise<import("../../domain/permission/index").Permission>;
    cleanPermissionsInDatabase: () => Promise<void>;
};
export default _default;
