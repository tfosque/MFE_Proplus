declare const hooks: {
    willResetSuperAdminPermissions: {
        call(param: unknown): Promise<unknown>;
        getHandlers(): import("@strapi/utils/dist/hooks").Handler[];
        register(handler: import("@strapi/utils/dist/hooks").Handler): import("@strapi/utils/dist/hooks").Hook<import("@strapi/utils/dist/hooks").Handler>;
        delete(handler: import("@strapi/utils/dist/hooks").Handler): import("@strapi/utils/dist/hooks").Hook<import("@strapi/utils/dist/hooks").Handler>;
    };
};
declare const sanitizeRole: import("lodash/fp").LodashOmit2x1;
/**
 * Create and save a role in database
 * @param attributes A partial role object
 * @returns {Promise<role>}
 */
declare const create: (attributes: any) => Promise<any>;
/**
 * Find a role in database
 * @param params query params to find the role
 * @param populate
 * @returns {Promise<role>}
 */
declare const findOne: (params?: any, populate?: any) => Promise<any>;
/**
 * Find a role in database with usersCounts
 * @param params query params to find the role
 * @param populate
 * @returns {Promise<role>}
 */
declare const findOneWithUsersCount: (params?: {}, populate?: any) => Promise<any>;
/**
 * Find roles in database
 * @param params query params to find the roles
 * @param populate
 * @returns {Promise<array>}
 */
declare const find: (params: {} | undefined, populate: any) => Promise<any[]>;
/**
 * Find all roles in database
 * @returns {Promise<array>}
 */
declare const findAllWithUsersCount: (params: any) => Promise<any>;
/**
 * Update a role in database
 * @param params query params to find the role to update
 * @param attributes A partial role object
 * @returns {Promise<role>}
 */
declare const update: (params: any, attributes: any) => Promise<any>;
/**
 * Check if a role exists in database
 * @param params query params to find the role
 * @returns {Promise<boolean>}
 */
declare const exists: (params?: {}) => Promise<boolean>;
/**
 * Count the number of roles based on search params
 * @param params params used for the query
 * @returns {Promise<number>}
 */
declare const count: (params?: {}) => Promise<number>;
/**
 * Check if the given roles id can be deleted safely, throw otherwise
 * @param ids
 * @returns {Promise<void>}
 */
declare const checkRolesIdForDeletion: (ids?: any[]) => Promise<void>;
/**
 * Delete roles in database if they have no user assigned
 * @param ids query params to find the roles
 * @returns {Promise<array>}
 */
declare const deleteByIds: (ids?: any[]) => Promise<any[]>;
/** Count the number of users for some roles
 * @returns {Promise<number>}
 * @param roleId
 */
declare const getUsersCount: (roleId: string) => Promise<number>;
/** Returns admin role
 * @returns {Promise<role>}
 */
declare const getSuperAdmin: () => Promise<any>;
/** Returns admin role with userCount
 * @returns {Promise<role>}
 */
declare const getSuperAdminWithUsersCount: () => Promise<any>;
/** Create superAdmin, Author and Editor role is no role already exist
 * @returns {Promise<>}
 */
declare const createRolesIfNoneExist: () => Promise<void>;
/** Display a warning if the role superAdmin doesn't exist
 *  or if the role is not assigned to at least one user
 * @returns {Promise<>}
 */
declare const displayWarningIfNoSuperAdmin: () => Promise<void>;
/**
 * Assign permissions to a role
 * @param {string|int} roleId - role ID
 * @param {Array<Permission{action,subject,fields,conditions}>} permissions - permissions to assign to the role
 */
declare const assignPermissions: (roleId: string, permissions?: never[]) => Promise<any>;
declare const addPermissions: (roleId: string, permissions: any) => Promise<import("../domain/permission").Permission>;
/**
 * Reset super admin permissions (giving it all permissions)
 * @returns {Promise<>}
 */
declare const resetSuperAdminPermissions: () => Promise<void>;
/**
 * Check if a user object includes the super admin role
 * @param {object} user
 * @return {boolean}
 */
declare const hasSuperAdminRole: (user: any) => any;
declare const constants: {
    superAdminCode: string;
};
export { hooks, sanitizeRole, create, findOne, findOneWithUsersCount, find, findAllWithUsersCount, update, exists, count, deleteByIds, getUsersCount, getSuperAdmin, getSuperAdminWithUsersCount, createRolesIfNoneExist, displayWarningIfNoSuperAdmin, addPermissions, hasSuperAdminRole, assignPermissions, resetSuperAdminPermissions, checkRolesIdForDeletion, constants, };
