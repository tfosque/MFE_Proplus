"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@strapi/utils");
const role_1 = require("../validation/role");
const permission_1 = require("../validation/permission");
const constants_1 = require("../services/constants");
const utils_2 = require("../utils");
const { ApplicationError } = utils_1.errors;
exports.default = {
    /**
     * Create a new role
     * @param {KoaContext} ctx - koa context
     */
    async create(ctx) {
        await (0, role_1.validateRoleCreateInput)(ctx.request.body);
        const roleService = (0, utils_2.getService)('role');
        const role = await roleService.create(ctx.request.body);
        const sanitizedRole = roleService.sanitizeRole(role);
        ctx.created({ data: sanitizedRole });
    },
    /**
     * Returns on role by id
     * @param {KoaContext} ctx - koa context
     */
    async findOne(ctx) {
        const { id } = ctx.params;
        const role = await (0, utils_2.getService)('role').findOneWithUsersCount({ id });
        if (!role) {
            return ctx.notFound('role.notFound');
        }
        ctx.body = {
            data: role,
        };
    },
    /**
     * Returns every roles
     * @param {KoaContext} ctx - koa context
     */
    async findAll(ctx) {
        const { query } = ctx.request;
        const permissionsManager = (0, utils_2.getService)('permission').createPermissionsManager({
            ability: ctx.state.userAbility,
            model: 'admin::role',
        });
        await permissionsManager.validateQuery(query);
        const sanitizedQuery = await permissionsManager.sanitizeQuery(query);
        const roles = await (0, utils_2.getService)('role').findAllWithUsersCount(sanitizedQuery);
        ctx.body = {
            data: roles,
        };
    },
    /**
     * Updates a role by id
     * @param {KoaContext} ctx - koa context
     */
    async update(ctx) {
        const { id } = ctx.params;
        const { body } = ctx.request;
        const roleService = (0, utils_2.getService)('role');
        await (0, role_1.validateRoleUpdateInput)(body);
        const role = await roleService.findOne({ id });
        if (!role) {
            return ctx.notFound('role.notFound');
        }
        if (role.code === constants_1.SUPER_ADMIN_CODE) {
            throw new ApplicationError("Super admin can't be edited.");
        }
        const updatedRole = await roleService.update({ id }, body);
        const sanitizedRole = roleService.sanitizeRole(updatedRole);
        ctx.body = {
            data: sanitizedRole,
        };
    },
    /**
     * Returns the permissions assigned to a role
     * @param {KoaContext} ctx - koa context
     */
    async getPermissions(ctx) {
        const { id } = ctx.params;
        const roleService = (0, utils_2.getService)('role');
        const permissionService = (0, utils_2.getService)('permission');
        const role = await roleService.findOne({ id });
        if (!role) {
            return ctx.notFound('role.notFound');
        }
        const permissions = await permissionService.findMany({ where: { role: { id: role.id } } });
        // @ts-expect-error
        const sanitizedPermissions = permissions.map(permissionService.sanitizePermission);
        ctx.body = {
            data: sanitizedPermissions,
        };
    },
    /**
     * Updates the permissions assigned to a role
     * @param {KoaContext} ctx - koa context
     */
    async updatePermissions(ctx) {
        const { id } = ctx.params;
        const { body: input } = ctx.request;
        const roleService = (0, utils_2.getService)('role');
        const permissionService = (0, utils_2.getService)('permission');
        const role = await roleService.findOne({ id });
        if (!role) {
            return ctx.notFound('role.notFound');
        }
        if (role.code === constants_1.SUPER_ADMIN_CODE) {
            throw new ApplicationError("Super admin permissions can't be edited.");
        }
        await (0, permission_1.validatedUpdatePermissionsInput)(input);
        if (!role) {
            return ctx.notFound('role.notFound');
        }
        const permissions = await roleService.assignPermissions(role.id, input.permissions);
        const sanitizedPermissions = permissions.map(permissionService.sanitizePermission);
        ctx.body = {
            data: sanitizedPermissions,
        };
    },
    /**
     * Delete a role
     * @param {KoaContext} ctx - koa context
     */
    async deleteOne(ctx) {
        const { id } = ctx.params;
        await (0, role_1.validateRoleDeleteInput)(id);
        const roleService = (0, utils_2.getService)('role');
        const roles = await roleService.deleteByIds([id]);
        const sanitizedRole = roles.map((role) => roleService.sanitizeRole(role))[0] || null;
        return ctx.deleted({
            data: sanitizedRole,
        });
    },
    /**
     * delete several roles
     * @param {KoaContext} ctx - koa context
     */
    async deleteMany(ctx) {
        const { body } = ctx.request;
        await (0, role_1.validateRolesDeleteInput)(body);
        const roleService = (0, utils_2.getService)('role');
        const roles = await roleService.deleteByIds(body.ids);
        const sanitizedRoles = roles.map(roleService.sanitizeRole);
        return ctx.deleted({
            data: sanitizedRoles,
        });
    },
};
//# sourceMappingURL=role.js.map