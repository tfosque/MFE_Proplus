"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@strapi/utils");
const fp_1 = require("lodash/fp");
const utils_2 = require("../utils");
const api_tokens_1 = require("../validation/api-tokens");
const { ApplicationError } = utils_1.errors;
exports.default = {
    async create(ctx) {
        const { body } = ctx.request;
        const apiTokenService = (0, utils_2.getService)('api-token');
        /**
         * We trim both field to avoid having issues with either:
         * - having a space at the end or start of the value.
         * - having only spaces as value;
         */
        const attributes = {
            name: (0, fp_1.trim)(body.name),
            description: (0, fp_1.trim)(body.description),
            type: body.type,
            permissions: body.permissions,
            lifespan: body.lifespan,
        };
        await (0, api_tokens_1.validateApiTokenCreationInput)(attributes);
        const alreadyExists = await apiTokenService.exists({ name: attributes.name });
        if (alreadyExists) {
            throw new ApplicationError('Name already taken');
        }
        const apiToken = await apiTokenService.create(attributes);
        ctx.created({ data: apiToken });
    },
    async regenerate(ctx) {
        const { id } = ctx.params;
        const apiTokenService = (0, utils_2.getService)('api-token');
        const apiTokenExists = await apiTokenService.getById(id);
        if (!apiTokenExists) {
            ctx.notFound('API Token not found');
            return;
        }
        const accessToken = await apiTokenService.regenerate(id);
        ctx.created({ data: accessToken });
    },
    async list(ctx) {
        const apiTokenService = (0, utils_2.getService)('api-token');
        const apiTokens = await apiTokenService.list();
        ctx.send({ data: apiTokens });
    },
    async revoke(ctx) {
        const { id } = ctx.params;
        const apiTokenService = (0, utils_2.getService)('api-token');
        const apiToken = await apiTokenService.revoke(id);
        ctx.deleted({ data: apiToken });
    },
    async get(ctx) {
        const { id } = ctx.params;
        const apiTokenService = (0, utils_2.getService)('api-token');
        const apiToken = await apiTokenService.getById(id);
        if (!apiToken) {
            ctx.notFound('API Token not found');
            return;
        }
        ctx.send({ data: apiToken });
    },
    async update(ctx) {
        const { body } = ctx.request;
        const { id } = ctx.params;
        const apiTokenService = (0, utils_2.getService)('api-token');
        const attributes = body;
        /**
         * We trim both field to avoid having issues with either:
         * - having a space at the end or start of the value.
         * - having only spaces as value;
         */
        if ((0, fp_1.has)('name', attributes)) {
            attributes.name = (0, fp_1.trim)(body.name);
        }
        if ((0, fp_1.has)('description', attributes) || attributes.description === null) {
            attributes.description = (0, fp_1.trim)(body.description);
        }
        await (0, api_tokens_1.validateApiTokenUpdateInput)(attributes);
        const apiTokenExists = await apiTokenService.getById(id);
        if (!apiTokenExists) {
            return ctx.notFound('API Token not found');
        }
        if ((0, fp_1.has)('name', attributes)) {
            const nameAlreadyTaken = await apiTokenService.getByName(attributes.name);
            /**
             * We cast the ids as string as the one coming from the ctx isn't cast
             * as a Number in case it is supposed to be an integer. It remains
             * as a string. This way we avoid issues with integers in the db.
             */
            if (!!nameAlreadyTaken && !(0, utils_1.stringEquals)(nameAlreadyTaken.id, id)) {
                throw new ApplicationError('Name already taken');
            }
        }
        const apiToken = await apiTokenService.update(id, attributes);
        ctx.send({ data: apiToken });
    },
    async getLayout(ctx) {
        const apiTokenService = (0, utils_2.getService)('api-token');
        // @ts-expect-error
        const layout = await apiTokenService.getApiTokenLayout();
        ctx.send({ data: layout });
    },
};
//# sourceMappingURL=api-token.js.map