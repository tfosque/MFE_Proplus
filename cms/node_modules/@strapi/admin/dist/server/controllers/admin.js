"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugins = exports.information = exports.telemetryProperties = exports.updateProjectSettings = exports.getProjectSettings = exports.init = exports.getProjectType = void 0;
const path_1 = __importDefault(require("path"));
const fp_1 = require("lodash/fp");
const lodash_1 = __importDefault(require("lodash"));
const fs_extra_1 = require("fs-extra");
const utils_1 = require("@strapi/utils");
const typescript_utils_1 = __importDefault(require("@strapi/typescript-utils"));
const project_settings_1 = require("../validation/project-settings");
const utils_2 = require("../utils");
const { isUsingTypeScript } = typescript_utils_1.default;
// eslint-disable-next-line node/no-extraneous-require
// const ee = require('@strapi/strapi/dist/utils/ee').default;
/**
 * A set of functions called "actions" for `Admin`
 */
// TODO very temporary to check the switch ee/ce
// When removing this we need to update the /admin/src/index.js file
// where we set the strapi.window.isEE value
async function getProjectType() {
    // FIXME
    try {
        // TODO: TS - Migrate EE to ts
        // return { data: { isEE: strapi.EE, features: ee.features.list() } };
    }
    catch (err) {
        return { data: { isEE: false, features: [] } };
    }
}
exports.getProjectType = getProjectType;
async function init() {
    let uuid = strapi.config.get('uuid', false);
    const hasAdmin = await (0, utils_2.getService)('user').exists();
    const { menuLogo, authLogo } = await (0, utils_2.getService)('project-settings').getProjectSettings();
    // set to null if telemetryDisabled flag not avaialble in package.json
    const telemetryDisabled = strapi.config.get('packageJsonStrapi.telemetryDisabled', null);
    if (telemetryDisabled !== null && telemetryDisabled === true) {
        uuid = false;
    }
    return {
        data: {
            uuid,
            hasAdmin,
            menuLogo: menuLogo ? menuLogo.url : null,
            authLogo: authLogo ? authLogo.url : null,
        },
    };
}
exports.init = init;
async function getProjectSettings() {
    return (0, utils_2.getService)('project-settings').getProjectSettings();
}
exports.getProjectSettings = getProjectSettings;
async function updateProjectSettings(ctx) {
    const projectSettingsService = (0, utils_2.getService)('project-settings');
    const { request: { files, body }, } = ctx;
    await (0, project_settings_1.validateUpdateProjectSettings)(body);
    await (0, project_settings_1.validateUpdateProjectSettingsFiles)(files);
    const formatedFiles = await projectSettingsService.parseFilesData(files);
    await (0, project_settings_1.validateUpdateProjectSettingsImagesDimensions)(formatedFiles);
    return projectSettingsService.updateProjectSettings({ ...body, ...formatedFiles });
}
exports.updateProjectSettings = updateProjectSettings;
async function telemetryProperties(ctx) {
    // If the telemetry is disabled, ignore the request and return early
    if (strapi.telemetry.isDisabled) {
        ctx.status = 204;
        return;
    }
    const useTypescriptOnServer = await isUsingTypeScript(strapi.dirs.app.root);
    const useTypescriptOnAdmin = await isUsingTypeScript(path_1.default.join(strapi.dirs.app.root, 'src', 'admin'));
    const isHostedOnStrapiCloud = (0, utils_1.env)('STRAPI_HOSTING', null) === 'strapi.cloud';
    const numberOfAllContentTypes = lodash_1.default.size(strapi.contentTypes);
    const numberOfComponents = lodash_1.default.size(strapi.components);
    const getNumberOfDynamicZones = () => {
        return (0, fp_1.pipe)((0, fp_1.map)('attributes'), (0, fp_1.flatMap)(fp_1.values), 
        // @ts-expect-error
        (0, fp_1.sumBy)((0, fp_1.propEq)('type', 'dynamiczone')))(strapi.contentTypes);
    };
    return {
        data: {
            useTypescriptOnServer,
            useTypescriptOnAdmin,
            isHostedOnStrapiCloud,
            numberOfAllContentTypes,
            numberOfComponents,
            numberOfDynamicZones: getNumberOfDynamicZones(),
        },
    };
}
exports.telemetryProperties = telemetryProperties;
async function information() {
    const currentEnvironment = strapi.config.get('environment');
    const autoReload = strapi.config.get('autoReload', false);
    const strapiVersion = strapi.config.get('info.strapi', null);
    const dependencies = strapi.config.get('info.dependencies', {});
    const projectId = strapi.config.get('uuid', null);
    const nodeVersion = process.version;
    const communityEdition = !strapi.EE;
    // @ts-expect-error
    const useYarn = await (0, fs_extra_1.exists)(path_1.default.join(process.cwd(), 'yarn.lock'));
    return {
        data: {
            currentEnvironment,
            autoReload,
            strapiVersion,
            dependencies,
            projectId,
            nodeVersion,
            communityEdition,
            useYarn,
        },
    };
}
exports.information = information;
async function plugins(ctx) {
    const enabledPlugins = strapi.config.get('enabledPlugins');
    const plugins = Object.entries(enabledPlugins).map(([key, plugin]) => ({
        name: plugin.info.name || key,
        displayName: plugin.info.displayName || plugin.info.name || key,
        description: plugin.info.description || '',
        packageName: plugin.info.packageName,
    }));
    ctx.send({ plugins });
}
exports.plugins = plugins;
//# sourceMappingURL=admin.js.map