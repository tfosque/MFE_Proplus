/// <reference types="koa" />
import * as admin from './admin';
declare const _default: {
    admin: typeof admin;
    'api-token': {
        create(ctx: any): Promise<void>;
        regenerate(ctx: any): Promise<void>;
        list(ctx: any): Promise<void>;
        revoke(ctx: any): Promise<void>;
        get(ctx: any): Promise<void>;
        update(ctx: any): Promise<any>;
        getLayout(ctx: any): Promise<void>;
    };
    'authenticated-user': {
        getMe(ctx: any): Promise<void>;
        updateMe(ctx: any): Promise<any>;
        getOwnPermissions(ctx: any): Promise<void>;
    };
    authentication: {
        login: import("koa").Middleware<unknown, any, any>;
        renewToken(ctx: any): Promise<void>;
        registrationInfo(ctx: any): Promise<void>;
        register(ctx: any): Promise<void>;
        registerAdmin(ctx: any): Promise<void>;
        forgotPassword(ctx: any): Promise<void>;
        resetPassword(ctx: any): Promise<void>;
        logout(ctx: any): void;
    };
    permission: {
        check(ctx: any): Promise<void>;
        getAll(ctx: any): Promise<void>;
    };
    role: {
        create(ctx: any): Promise<void>;
        findOne(ctx: any): Promise<any>;
        findAll(ctx: any): Promise<void>;
        update(ctx: any): Promise<any>;
        getPermissions(ctx: any): Promise<any>;
        updatePermissions(ctx: any): Promise<any>;
        deleteOne(ctx: any): Promise<any>;
        deleteMany(ctx: any): Promise<any>;
    };
    transfer: {
        [x: string]: any;
    };
    user: {
        create(ctx: any): Promise<void>;
        find(ctx: any): Promise<void>;
        findOne(ctx: any): Promise<any>;
        update(ctx: any): Promise<any>;
        deleteOne(ctx: any): Promise<any>;
        deleteMany(ctx: any): Promise<any>;
    };
    webhooks: {
        listWebhooks(ctx: any): Promise<void>;
        getWebhook(ctx: any): Promise<any>;
        createWebhook(ctx: any): Promise<void>;
        updateWebhook(ctx: any): Promise<any>;
        deleteWebhook(ctx: any): Promise<any>;
        deleteWebhooks(ctx: any): Promise<any>;
        triggerWebhook(ctx: any): Promise<void>;
    };
    'content-api': {
        getPermissions(ctx: any): Promise<void>;
        getRoutes(ctx: any): Promise<void>;
    };
};
export default _default;
