"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateRegisterProviderAction = void 0;
const utils_1 = require("@strapi/utils");
const common_validators_1 = __importDefault(require("./common-validators"));
const registerProviderActionSchema = utils_1.yup
    .array()
    .required()
    .of(utils_1.yup
    .object()
    .shape({
    uid: utils_1.yup
        .string()
        .matches(/^[a-z]([a-z|.|-]+)[a-z]$/, (v) => `${v.path}: The id can only contain lowercase letters, dots and hyphens.`)
        .required(),
    section: utils_1.yup.string().oneOf(['contentTypes', 'plugins', 'settings', 'internal']).required(),
    pluginName: utils_1.yup.mixed().when('section', {
        is: 'plugins',
        then: common_validators_1.default.isAPluginName.required(),
        otherwise: common_validators_1.default.isAPluginName,
    }),
    subjects: utils_1.yup.mixed().when('section', {
        is: 'contentTypes',
        then: utils_1.yup.array().of(utils_1.yup.string()).required(),
        otherwise: utils_1.yup
            .mixed()
            .oneOf([undefined], 'subjects should only be defined for the "contentTypes" section'),
    }),
    displayName: utils_1.yup.string().required(),
    category: utils_1.yup.mixed().when('section', {
        is: 'settings',
        then: utils_1.yup.string().required(),
        otherwise: utils_1.yup
            .mixed()
            .test('settingsCategory', 'category should only be defined for the "settings" section', (cat) => cat === undefined),
    }),
    subCategory: utils_1.yup.mixed().when('section', {
        is: (section) => ['settings', 'plugins'].includes(section),
        then: utils_1.yup.string(),
        otherwise: utils_1.yup
            .mixed()
            .test('settingsSubCategory', 'subCategory should only be defined for "plugins" and "settings" sections', (subCat) => {
            return subCat === undefined;
        }),
    }),
    options: utils_1.yup.object({
        applyToProperties: utils_1.yup.array().of(utils_1.yup.string()),
    }),
})
    .noUnknown());
exports.validateRegisterProviderAction = (0, utils_1.validateYupSchemaSync)(registerProviderActionSchema);
exports.default = {
    validateRegisterProviderAction: exports.validateRegisterProviderAction,
};
//# sourceMappingURL=action-provider.js.map