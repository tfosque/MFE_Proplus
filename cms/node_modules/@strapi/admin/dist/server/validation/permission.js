"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatedUpdatePermissionsInput = exports.validateCheckPermissionsInput = exports.validatePermissionsExist = void 0;
const utils_1 = require("@strapi/utils");
const utils_2 = require("../utils");
const common_validators_1 = __importDefault(require("./common-validators"));
const checkPermissionsSchema = utils_1.yup.object().shape({
    permissions: utils_1.yup.array().of(utils_1.yup
        .object()
        .shape({
        action: utils_1.yup.string().required(),
        subject: utils_1.yup.string().nullable(),
        field: utils_1.yup.string(),
    })
        .noUnknown()),
});
const checkPermissionsExist = function (permissions) {
    const existingActions = (0, utils_2.getService)('permission').actionProvider.values();
    const failIndex = permissions.findIndex((permission) => !existingActions.some((action) => action.actionId === permission.action &&
        (action.section !== 'contentTypes' || action.subjects.includes(permission.subject))));
    return failIndex === -1
        ? true
        : // @ts-expect-error
            this.createError({
                path: 'permissions',
                message: `[${failIndex}] is not an existing permission action`,
            });
};
const actionsExistSchema = utils_1.yup
    .array()
    .of(utils_1.yup.object().shape({
    conditions: utils_1.yup.array().of(utils_1.yup.string()),
}))
    .test('actions-exist', '', checkPermissionsExist);
exports.validatePermissionsExist = (0, utils_1.validateYupSchema)(actionsExistSchema);
exports.validateCheckPermissionsInput = (0, utils_1.validateYupSchema)(checkPermissionsSchema);
exports.validatedUpdatePermissionsInput = (0, utils_1.validateYupSchema)(common_validators_1.default.updatePermissions);
exports.default = {
    validatedUpdatePermissionsInput: exports.validatedUpdatePermissionsInput,
    validatePermissionsExist: exports.validatePermissionsExist,
    validateCheckPermissionsInput: exports.validateCheckPermissionsInput,
};
//# sourceMappingURL=permission.js.map