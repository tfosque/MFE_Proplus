"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const utils_1 = __importDefault(require("@strapi/utils"));
const fp_1 = require("lodash/fp");
const { RateLimitError } = utils_1.default.errors;
exports.default = (config, { strapi }) => async (ctx, next) => {
    let rateLimitConfig = strapi.config.get('admin.rateLimit');
    if (!rateLimitConfig) {
        rateLimitConfig = {
            enabled: true,
        };
    }
    if (!(0, fp_1.has)('enabled', rateLimitConfig)) {
        rateLimitConfig.enabled = true;
    }
    if (rateLimitConfig.enabled === true) {
        // TODO: TS - Do the dynamic import
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const rateLimit = require('koa2-ratelimit').RateLimit;
        const userEmail = (0, fp_1.toLower)(ctx.request.body.email) || 'unknownEmail';
        const requestPath = (0, fp_1.isString)(ctx.request.path)
            ? (0, fp_1.toLower)(path_1.default.normalize(ctx.request.path)).replace(/\/$/, '')
            : 'invalidPath';
        const loadConfig = {
            interval: { min: 5 },
            max: 5,
            prefixKey: `${userEmail}:${requestPath}:${ctx.request.ip}`,
            handler() {
                throw new RateLimitError();
            },
            ...rateLimitConfig,
            ...config,
        };
        return rateLimit.middleware(loadConfig)(ctx, next);
    }
    return next();
};
//# sourceMappingURL=rateLimit.js.map