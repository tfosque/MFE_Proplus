"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSecretIsDefined = exports.decodeJwtToken = exports.getTokenOptions = exports.createJwtToken = exports.createToken = void 0;
const crypto_1 = __importDefault(require("crypto"));
const lodash_1 = __importDefault(require("lodash"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const defaultJwtOptions = { expiresIn: '30d' };
const getTokenOptions = () => {
    const { options, secret } = strapi.config.get('admin.auth', {});
    return {
        secret,
        options: lodash_1.default.merge(defaultJwtOptions, options),
    };
};
exports.getTokenOptions = getTokenOptions;
/**
 * Create a random token
 */
const createToken = () => {
    return crypto_1.default.randomBytes(20).toString('hex');
};
exports.createToken = createToken;
/**
 * Creates a JWT token for an administration user
 * @param user - admin user
 */
const createJwtToken = (user) => {
    const { options, secret } = getTokenOptions();
    return jsonwebtoken_1.default.sign({ id: user.id }, secret, options);
};
exports.createJwtToken = createJwtToken;
/**
 * Tries to decode a token an return its payload and if it is valid
 * @param token - a token to decode
 * @return decodeInfo - the decoded info
 */
const decodeJwtToken = (token) => {
    const { secret } = getTokenOptions();
    try {
        const payload = jsonwebtoken_1.default.verify(token, secret);
        return { payload, isValid: true };
    }
    catch (err) {
        return { payload: null, isValid: false };
    }
};
exports.decodeJwtToken = decodeJwtToken;
const checkSecretIsDefined = () => {
    if (strapi.config.serveAdminPanel && !strapi.config.get('admin.auth.secret')) {
        throw new Error(`Missing auth.secret. Please set auth.secret in config/admin.js (ex: you can generate one using Node with \`crypto.randomBytes(16).toString('base64')\`).
For security reasons, prefer storing the secret in an environment variable and read it in config/admin.js. See https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/environment.html#configuration-using-environment-variables.`);
    }
};
exports.checkSecretIsDefined = checkSecretIsDefined;
//# sourceMappingURL=token.js.map