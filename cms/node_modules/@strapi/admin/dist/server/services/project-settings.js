"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProjectSettings = exports.getProjectSettings = exports.parseFilesData = exports.deleteOldFiles = void 0;
const fs_1 = __importDefault(require("fs"));
const lodash_1 = require("lodash");
const PROJECT_SETTINGS_FILE_INPUTS = ['menuLogo', 'authLogo'];
const parseFilesData = async (files) => {
    const formatedFilesData = {};
    await Promise.all(PROJECT_SETTINGS_FILE_INPUTS.map(async (inputName) => {
        const file = files[inputName];
        // Skip empty file inputs
        if (!file) {
            return;
        }
        const getStream = () => fs_1.default.createReadStream(file.path);
        // Add formated data for the upload provider
        formatedFilesData[inputName] = await strapi
            .plugin('upload')
            .service('upload')
            .formatFileInfo({
            filename: file.name,
            type: file.type,
            size: file.size,
        });
        // Add image dimensions
        Object.assign(formatedFilesData[inputName], await strapi.plugin('upload').service('image-manipulation').getDimensions({ getStream }));
        // Add file path, and stream
        Object.assign(formatedFilesData[inputName], {
            stream: getStream(),
            tmpPath: file.path,
            // @ts-expect-error
            provider: strapi.config.get('plugin.upload').provider,
        });
    }));
    return formatedFilesData;
};
exports.parseFilesData = parseFilesData;
const getProjectSettings = async () => {
    const store = strapi.store({ type: 'core', name: 'admin' });
    // Returns an object with file inputs names as key and null as value
    const defaultProjectSettings = PROJECT_SETTINGS_FILE_INPUTS.reduce((prev, cur) => {
        prev[cur] = null;
        return prev;
    }, {});
    const projectSettings = {
        ...defaultProjectSettings,
        // @ts-expect-error
        ...(await store.get({ key: 'project-settings' })),
    };
    // Filter file input fields
    PROJECT_SETTINGS_FILE_INPUTS.forEach((inputName) => {
        if (!projectSettings[inputName]) {
            return;
        }
        projectSettings[inputName] = (0, lodash_1.pick)(projectSettings[inputName], [
            'name',
            'url',
            'width',
            'height',
            'ext',
            'size',
        ]);
    });
    return projectSettings;
};
exports.getProjectSettings = getProjectSettings;
const uploadFiles = async (files = {}) => {
    // Call the provider upload function for each file
    return Promise.all(Object.values(files)
        .filter((file) => file.stream instanceof fs_1.default.ReadStream)
        .map((file) => strapi.plugin('upload').provider.uploadStream(file)));
};
const deleteOldFiles = async ({ previousSettings, newSettings }) => {
    return Promise.all(PROJECT_SETTINGS_FILE_INPUTS.map(async (inputName) => {
        // Skip if the store doesn't contain project settings
        if (!previousSettings) {
            return;
        }
        // Skip if there was no previous file
        if (!previousSettings[inputName]) {
            return;
        }
        // Skip if the file was not changed
        if (newSettings[inputName] &&
            previousSettings[inputName].hash === newSettings[inputName].hash) {
            return;
        }
        // Skip if the file was not uploaded with the current provider
        // @ts-expect-error
        if (strapi.config.get('plugin.upload').provider !== previousSettings[inputName].provider) {
            return;
        }
        // There was a previous file and an new file was uploaded
        // Remove the previous file
        strapi.plugin('upload').provider.delete(previousSettings[inputName]);
    }));
};
exports.deleteOldFiles = deleteOldFiles;
const updateProjectSettings = async (newSettings) => {
    const store = strapi.store({ type: 'core', name: 'admin' });
    const previousSettings = (await store.get({ key: 'project-settings' }));
    const files = (0, lodash_1.pick)(newSettings, PROJECT_SETTINGS_FILE_INPUTS);
    await uploadFiles(files);
    PROJECT_SETTINGS_FILE_INPUTS.forEach((inputName) => {
        // If the user input exists but is not a formdata "file" remove it
        if (newSettings[inputName] !== undefined && !(typeof newSettings[inputName] === 'object')) {
            newSettings[inputName] = null;
            return;
        }
        // If the user input is undefined reuse previous setting (do not update field)
        if (!newSettings[inputName] && previousSettings) {
            newSettings[inputName] = previousSettings[inputName];
            return;
        }
        // Update the file
        newSettings[inputName] = (0, lodash_1.pick)(newSettings[inputName], [
            'name',
            'hash',
            'url',
            'width',
            'height',
            'ext',
            'size',
            'provider',
        ]);
    });
    // No await to proceed asynchronously
    deleteOldFiles({ previousSettings, newSettings });
    await store.set({
        key: 'project-settings',
        value: { ...previousSettings, ...newSettings },
    });
    return getProjectSettings();
};
exports.updateProjectSettings = updateProjectSettings;
//# sourceMappingURL=project-settings.js.map