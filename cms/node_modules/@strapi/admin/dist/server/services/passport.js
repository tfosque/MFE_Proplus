"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authEventsMapper = exports.getPassportStrategies = exports.init = void 0;
// @ts-expect-error
const koa_passport_1 = __importDefault(require("koa-passport"));
const fp_1 = require("lodash/fp");
const local_strategy_1 = __importDefault(require("./passport/local-strategy"));
const authEventsMapper = {
    onConnectionSuccess: 'admin.auth.success',
    onConnectionError: 'admin.auth.error',
};
exports.authEventsMapper = authEventsMapper;
const valueIsFunctionType = ([, value]) => (0, fp_1.isFunction)(value);
const keyIsValidEventName = ([key]) => {
    return Object.keys(strapi.admin.services.passport.authEventsMapper).includes(key);
};
const getPassportStrategies = () => [(0, local_strategy_1.default)(strapi)];
exports.getPassportStrategies = getPassportStrategies;
const registerAuthEvents = () => {
    const { events = {} } = strapi.config.get('admin.auth', {});
    const { authEventsMapper } = strapi.admin.services.passport;
    const eventList = Object.entries(events)
        .filter(keyIsValidEventName)
        .filter(valueIsFunctionType);
    for (const [eventName, handler] of eventList) {
        strapi.eventHub.on(authEventsMapper[eventName], handler);
    }
};
const init = () => {
    strapi.admin.services.passport
        .getPassportStrategies()
        .forEach((strategy) => koa_passport_1.default.use(strategy));
    registerAuthEvents();
    return koa_passport_1.default.initialize();
};
exports.init = init;
//# sourceMappingURL=passport.js.map