"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startCron = exports.sendUpdateProjectInformation = exports.sendDidChangeInterfaceLanguage = exports.sendDidUpdateRolePermissions = exports.sendDidInviteUser = void 0;
const utils_1 = require("../utils");
const sendDidInviteUser = async () => {
    const numberOfUsers = await (0, utils_1.getService)('user').count();
    const numberOfRoles = await (0, utils_1.getService)('role').count();
    strapi.telemetry.send('didInviteUser', {
        groupProperties: { numberOfRoles, numberOfUsers },
    });
};
exports.sendDidInviteUser = sendDidInviteUser;
const sendDidUpdateRolePermissions = async () => {
    strapi.telemetry.send('didUpdateRolePermissions');
};
exports.sendDidUpdateRolePermissions = sendDidUpdateRolePermissions;
const sendDidChangeInterfaceLanguage = async () => {
    const languagesInUse = await (0, utils_1.getService)('user').getLanguagesInUse();
    // This event is anonymous
    strapi.telemetry.send('didChangeInterfaceLanguage', { userProperties: { languagesInUse } });
};
exports.sendDidChangeInterfaceLanguage = sendDidChangeInterfaceLanguage;
const sendUpdateProjectInformation = async () => {
    const numberOfActiveAdminUsers = await (0, utils_1.getService)('user').count({ isActive: true });
    const numberOfAdminUsers = await (0, utils_1.getService)('user').count();
    strapi.telemetry.send('didUpdateProjectInformation', {
        groupProperties: { numberOfActiveAdminUsers, numberOfAdminUsers },
    });
};
exports.sendUpdateProjectInformation = sendUpdateProjectInformation;
const startCron = (strapi) => {
    strapi.cron.add({
        '0 0 0 * * *': () => sendUpdateProjectInformation(),
    });
};
exports.startCron = startCron;
//# sourceMappingURL=metrics.js.map