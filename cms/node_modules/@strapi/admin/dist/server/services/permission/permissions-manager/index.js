"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/default-param-last */
const _ = require("lodash");
const fp_1 = require("lodash/fp");
const ability_1 = require("@casl/ability");
const sanitize_1 = __importDefault(require("./sanitize"));
const validate_1 = __importDefault(require("./validate"));
const query_builders_1 = require("./query-builders");
exports.default = ({ ability, action, model }) => ({
    ability,
    action,
    model,
    get isAllowed() {
        return this.ability.can(action, model);
    },
    toSubject(target, subjectType = model) {
        return (0, ability_1.subject)(subjectType, target);
    },
    pickPermittedFieldsOf(data, options = {}) {
        return this.sanitizeInput(data, options);
    },
    getQuery(queryAction = action) {
        if (_.isUndefined(queryAction)) {
            throw new Error('Action must be defined to build a permission query');
        }
        return (0, query_builders_1.buildStrapiQuery)((0, query_builders_1.buildCaslQuery)(ability, queryAction, model));
    },
    addPermissionsQueryTo(query = {}, action) {
        const newQuery = (0, fp_1.cloneDeep)(query);
        const permissionQuery = this.getQuery(action) ?? undefined;
        if ((0, fp_1.isPlainObject)(query.filters)) {
            newQuery.filters = permissionQuery
                ? { $and: [query.filters, permissionQuery] }
                : query.filters;
        }
        else {
            newQuery.filters = permissionQuery;
        }
        return newQuery;
    },
    ...(0, sanitize_1.default)({ action, ability, model }),
    ...(0, validate_1.default)({ action, ability, model }),
});
//# sourceMappingURL=index.js.map