"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const permissions_1 = __importDefault(require("@strapi/permissions"));
const index_1 = __importDefault(require("../../domain/permission/index"));
const utils_1 = require("../../utils");
exports.default = (params) => {
    const { providers } = params;
    const engine = permissions_1.default.engine
        .new({ providers })
        /**
         * Validate the permission's action exists in the action registry
         */
        .on('before-format::validate.permission', ({ permission }) => {
        const action = providers.action.get(permission.action);
        // If the action isn't registered into the action provider, then ignore the permission
        if (!action) {
            strapi.log.debug(`Unknown action "${permission.action}" supplied when registering a new permission in engine`);
            return false;
        }
    })
        /**
         * Remove invalid properties from the permission based on the action (applyToProperties)
         */
        .on('format.permission', (permission) => {
        const action = providers.action.get(permission.action);
        const properties = permission.properties || {};
        // Only keep the properties allowed by the action (action.applyToProperties)
        const propertiesName = Object.keys(properties);
        const invalidProperties = (0, fp_1.difference)(propertiesName, action.applyToProperties || propertiesName);
        const permissionWithSanitizedProperties = invalidProperties.reduce((property) => index_1.default.deleteProperty(property, permission), permission);
        return permissionWithSanitizedProperties;
    })
        /**
         * Ignore the permission if the fields property is an empty array (access to no field)
         */
        .on('after-format::validate.permission', ({ permission }) => {
        const { fields } = permission.properties;
        if ((0, fp_1.isArray)(fields) && (0, fp_1.isEmpty)(fields)) {
            return false;
        }
    });
    return {
        get hooks() {
            return engine.hooks;
        },
        /**
         * Generate an ability based on the given user (using associated roles & permissions)
         * @param user
         * @returns {Promise<Ability>}
         */
        async generateUserAbility(user) {
            const permissions = (await (0, utils_1.getService)('permission').findUserPermissions(user));
            return engine.generateAbility(permissions, user);
        },
        /**
         * Check many permissions based on an ability
         */
        checkMany: (0, fp_1.curry)((ability, permissions) => {
            return permissions.map(({ action, subject, field }) => ability.can(action, subject, field));
        }),
    };
};
//# sourceMappingURL=engine.js.map