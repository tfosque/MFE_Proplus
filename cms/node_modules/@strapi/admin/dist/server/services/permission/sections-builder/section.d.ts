/**
 * Upon call, creates a new section object
 * @param {SectionOptions} options
 */
declare const createSection: ({ initialStateFactory, handlers, matchers, }?: {
    initialStateFactory?: (() => {}) | undefined;
    handlers?: never[] | undefined;
    matchers?: never[] | undefined;
}) => {
    hooks: {
        handlers: {
            call(context: unknown): Promise<void>;
            getHandlers(): import("@strapi/utils/dist/hooks").Handler[];
            register(handler: import("@strapi/utils/dist/hooks").Handler): import("@strapi/utils/dist/hooks").Hook<import("@strapi/utils/dist/hooks").Handler>;
            delete(handler: import("@strapi/utils/dist/hooks").Handler): import("@strapi/utils/dist/hooks").Hook<import("@strapi/utils/dist/hooks").Handler>;
        };
        matchers: {
            call(context: unknown): Promise<any[]>;
            getHandlers(): import("@strapi/utils/dist/hooks").Handler[];
            register(handler: import("@strapi/utils/dist/hooks").Handler): import("@strapi/utils/dist/hooks").Hook<import("@strapi/utils/dist/hooks").Handler>;
            delete(handler: import("@strapi/utils/dist/hooks").Handler): import("@strapi/utils/dist/hooks").Hook<import("@strapi/utils/dist/hooks").Handler>;
        };
    };
    /**
     * Verifies if an action can be applied to the section by running the matchers hook.
     * If any of the registered matcher functions returns true, then the condition applies.
     * @param {Action} action
     * @return {Promise<boolean>}
     */
    appliesToAction(action: any): Promise<boolean>;
    /**
     * Init, build and returns a section object based on the given actions
     * @param {Array<Action>} actions - A list of actions used to populate the section
     * @return {Promise<any>}
     */
    build(actions?: never[]): Promise<{}>;
};
export default createSection;
