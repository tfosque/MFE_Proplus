"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildStrapiQuery = exports.buildCaslQuery = void 0;
// TODO: migration
const lodash_1 = __importDefault(require("lodash"));
const extra_1 = require("@casl/ability/extra");
const operatorsMap = {
    $in: '$in',
    $nin: '$notIn',
    $exists: '$notNull',
    $gte: '$gte',
    $gt: '$gt',
    $lte: '$lte',
    $lt: '$lt',
    $eq: '$eq',
    $ne: '$ne',
    $and: '$and',
    $or: '$or',
    $not: '$not',
};
const mapKey = (key) => {
    if (lodash_1.default.isString(key) && key.startsWith('$') && key in operatorsMap) {
        return operatorsMap[key];
    }
    return key;
};
const buildCaslQuery = (ability, action, model) => {
    // @ts-expect-error
    return (0, extra_1.rulesToQuery)(ability, action, model, (o) => o.conditions);
};
exports.buildCaslQuery = buildCaslQuery;
const buildStrapiQuery = (caslQuery) => {
    return unwrapDeep(caslQuery);
};
exports.buildStrapiQuery = buildStrapiQuery;
const unwrapDeep = (obj) => {
    if (!lodash_1.default.isPlainObject(obj) && !lodash_1.default.isArray(obj)) {
        return obj;
    }
    if (lodash_1.default.isArray(obj)) {
        return obj.map((v) => unwrapDeep(v));
    }
    return lodash_1.default.reduce(obj, (acc, v, k) => {
        const key = mapKey(k);
        if (lodash_1.default.isPlainObject(v)) {
            if ('$elemMatch' in v) {
                lodash_1.default.setWith(acc, key, unwrapDeep(v.$elemMatch));
            }
            else {
                lodash_1.default.setWith(acc, key, unwrapDeep(v));
            }
        }
        else if (lodash_1.default.isArray(v)) {
            // prettier-ignore
            lodash_1.default.setWith(acc, key, v.map(v => unwrapDeep(v)));
        }
        else {
            lodash_1.default.setWith(acc, key, v);
        }
        return acc;
    }, {});
};
//# sourceMappingURL=query-builders.js.map