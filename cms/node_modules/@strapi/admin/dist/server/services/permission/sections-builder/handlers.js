"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fieldsProperty = exports.contentTypesBase = exports.subjectsHandlerFor = exports.settings = exports.plugins = void 0;
const utils_1 = require("@strapi/utils");
const utils_2 = require("./utils");
const { isVisibleAttribute } = utils_1.contentTypes;
/**
 * @typedef ContentTypesSection
 * @property {Array<Action>} actions
 * @property {Array<Object>} subjects
 */
/**
 * @typedef {Array<Action>} ActionArraySection
 */
/**
 * Transforms & adds the given  setting action to the section
 * Note: The action is transformed to a setting specific format
 * @param {object} options
 * @param {Action} options.action
 * @param {ActionArraySection} section
 */
const settings = ({ action, section }) => {
    const { category, subCategory, displayName, actionId } = action;
    section.push({
        displayName,
        category,
        subCategory,
        action: actionId,
    });
};
exports.settings = settings;
/**
 * Transforms & adds the given plugin action to the section
 * Note: The action is transformed to a plugin specific format
 * @param {object} options
 * @param {Action} options.action
 * @param {ActionArraySection} section
 */
const plugins = ({ action, section }) => {
    const { pluginName, subCategory, displayName, actionId } = action;
    section.push({
        displayName,
        plugin: pluginName,
        subCategory,
        action: actionId,
    });
};
exports.plugins = plugins;
/**
 * Transforms & adds the given action to the section's actions field
 * Note: The action is transformed to a content-type specific format
 * @param {object} options
 * @param {Action} options.action
 * @param {ContentTypesSection} section
 */
const contentTypesBase = ({ action, section }) => {
    const { displayName, actionId, subjects, options } = action;
    section.actions.push({
        label: displayName,
        actionId,
        subjects,
        ...(0, utils_2.getValidOptions)(options),
    });
};
exports.contentTypesBase = contentTypesBase;
/**
 * Initialize the subjects array of a section based on the action's subjects
 */
const subjectsHandlerFor = (kind) => ({ action, section: contentTypesSection }) => {
    const { subjects } = action;
    const newSubjects = subjects
        // Ignore already added subjects
        .filter((0, utils_2.isNotInSubjects)(contentTypesSection.subjects))
        // Transform UIDs into content-types
        .map(utils_2.resolveContentType)
        // Only keep specific kind of content-types
        .filter((0, utils_2.isOfKind)(kind))
        // Transform the content-types into section's subjects
        .map(utils_2.toSubjectTemplate);
    contentTypesSection.subjects.push(...newSubjects);
};
exports.subjectsHandlerFor = subjectsHandlerFor;
const buildNode = (model, attributeName, attribute) => {
    if (!isVisibleAttribute(model, attributeName)) {
        return null;
    }
    const node = { label: attributeName, value: attributeName };
    if (attribute.required) {
        Object.assign(node, { required: true });
    }
    if (attribute.type === 'component') {
        const component = strapi.components[attribute.component];
        return { ...node, children: buildDeepAttributesCollection(component) };
    }
    return node;
};
const buildDeepAttributesCollection = (model) => {
    return Object.entries(model.attributes)
        .map(([attributeName, attribute]) => buildNode(model, attributeName, attribute))
        .filter((node) => node !== null);
};
/**
 * Create and populate the fields property for section's subjects based on the action's subjects list
 * @param {object} options
 * @param {Action} options.action
 * @param {ContentTypesSection} section
 */
const fieldsProperty = ({ action, section }) => {
    const { subjects } = action;
    section.subjects
        .filter((subject) => subjects.includes(subject.uid))
        .forEach((subject) => {
        const { uid } = subject;
        const contentType = (0, utils_2.resolveContentType)(uid);
        if ((0, utils_2.hasProperty)('fields', subject)) {
            return;
        }
        const fields = buildDeepAttributesCollection(contentType);
        const fieldsProp = { label: 'Fields', value: 'fields', children: fields };
        subject.properties.push(fieldsProp);
    });
};
exports.fieldsProperty = fieldsProperty;
//# sourceMappingURL=handlers.js.map