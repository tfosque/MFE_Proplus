"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const koa_static_1 = __importDefault(require("koa-static"));
const registerAdminPanelRoute = ({ strapi }) => {
    let buildDir = (0, path_1.resolve)(strapi.dirs.dist.root, 'build');
    if (!fs_extra_1.default.pathExistsSync(buildDir)) {
        buildDir = (0, path_1.resolve)(__dirname, '../../build');
    }
    const serveAdminMiddleware = async (ctx, next) => {
        await next();
        if (ctx.method !== 'HEAD' && ctx.method !== 'GET') {
            return;
        }
        if (ctx.body != null || ctx.status !== 404) {
            return;
        }
        ctx.type = 'html';
        ctx.body = fs_extra_1.default.createReadStream((0, path_1.join)(buildDir, 'index.html'));
    };
    strapi.server.routes([
        {
            method: 'GET',
            path: `${strapi.config.admin.path}/:path*`,
            // @ts-expect-error
            handler: [
                serveAdminMiddleware,
                serveStatic(buildDir, {
                    maxage: 31536000,
                    defer: false,
                    index: 'index.html',
                    setHeaders(res, path) {
                        const ext = (0, path_1.extname)(path);
                        // publicly cache static files to avoid unnecessary network & disk access
                        if (ext !== '.html') {
                            res.setHeader('cache-control', 'public, max-age=31536000, immutable');
                        }
                    },
                }),
            ],
            config: { auth: false },
        },
    ]);
};
// serveStatic is not supposed to be used to serve a folder that have sub-folders
const serveStatic = (filesDir, koaStaticOptions = {}) => {
    const serve = (0, koa_static_1.default)(filesDir, koaStaticOptions);
    return async (ctx, next) => {
        const prev = ctx.path;
        const newPath = (0, path_1.basename)(ctx.path);
        ctx.path = newPath;
        await serve(ctx, async () => {
            ctx.path = prev;
            await next();
            ctx.path = newPath;
        });
        ctx.path = prev;
    };
};
exports.default = registerAdminPanelRoute;
//# sourceMappingURL=serve-admin-panel.js.map