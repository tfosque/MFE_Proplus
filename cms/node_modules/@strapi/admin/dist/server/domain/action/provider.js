"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@strapi/utils");
const action_provider_1 = require("../../validation/action-provider");
const index_1 = __importDefault(require("./index"));
/**
 * Creates a new instance of an action provider
 */
const createActionProvider = (options) => {
    const provider = (0, utils_1.providerFactory)(options);
    const actionHooks = {
        appliesPropertyToSubject: utils_1.hooks.createAsyncParallelHook(),
    };
    return {
        ...provider,
        hooks: {
            ...provider.hooks,
            ...actionHooks,
        },
        async register(actionAttributes) {
            if (strapi.isLoaded) {
                throw new Error(`You can't register new actions outside of the bootstrap function.`);
            }
            (0, action_provider_1.validateRegisterProviderAction)([actionAttributes]);
            const action = index_1.default.create(actionAttributes);
            return provider.register(action.actionId, action);
        },
        async registerMany(actionsAttributes) {
            (0, action_provider_1.validateRegisterProviderAction)(actionsAttributes);
            for (const attributes of actionsAttributes) {
                await this.register(attributes);
            }
            return this;
        },
        async appliesToProperty(property, actionId, subject) {
            const action = provider.get(actionId);
            if (!action) {
                return false;
            }
            const appliesToAction = index_1.default.appliesToProperty(property, action);
            // If the property isn't valid for this action, ignore the rest of the checks
            if (!appliesToAction) {
                return false;
            }
            // If the property is valid for this action and there isn't any subject
            if (!subject) {
                return true;
            }
            // If the property is valid for this action and the subject is not handled by the action
            if (!index_1.default.appliesToSubject(subject, action)) {
                return false;
            }
            const results = await actionHooks.appliesPropertyToSubject.call({
                property,
                action,
                subject,
            });
            return results.every((result) => result !== false);
        },
    };
};
exports.default = createActionProvider;
//# sourceMappingURL=provider.js.map