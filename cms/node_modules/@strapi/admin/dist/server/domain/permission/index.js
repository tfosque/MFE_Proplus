"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toPermission = exports.sanitizeConditions = exports.create = exports.deleteProperty = exports.setProperty = exports.getProperty = exports.removeCondition = exports.addCondition = exports.sanitizePermissionFields = exports.sanitizedPermissionFields = exports.permissionFields = void 0;
const fp_1 = require("lodash/fp");
exports.permissionFields = [
    'id',
    'action',
    'actionParameters',
    'subject',
    'properties',
    'conditions',
    'role',
];
exports.sanitizedPermissionFields = [
    'id',
    'action',
    'actionParameters',
    'subject',
    'properties',
    'conditions',
];
exports.sanitizePermissionFields = (0, fp_1.pick)(exports.sanitizedPermissionFields);
/**
 * Creates a permission with default values
 */
const getDefaultPermission = () => ({
    actionParameters: {},
    conditions: [],
    properties: {},
    subject: null,
});
/**
 * Returns a new permission with the given condition
 * @param condition - The condition to add
 * @param permission - The permission on which we want to add the condition
 * @return
 */
exports.addCondition = (0, fp_1.curry)((condition, permission) => {
    const { conditions } = permission;
    const newConditions = Array.isArray(conditions)
        ? (0, fp_1.uniq)(conditions.concat(condition))
        : [condition];
    return (0, fp_1.set)('conditions', newConditions, permission);
});
/**
 * Returns a new permission without the given condition
 * @param condition - The condition to remove
 * @param permission - The permission on which we want to remove the condition
 */
exports.removeCondition = (0, fp_1.curry)((condition, permission) => {
    return (0, fp_1.set)('conditions', (0, fp_1.remove)((0, fp_1.eq)(condition), permission.conditions), permission);
});
/**
 * Gets a property or a part of a property from a permission.
 * @param property - The property to get
 * @param permission - The permission on which we want to access the property
 */
exports.getProperty = (0, fp_1.curry)((property, permission) => (0, fp_1.get)(`properties.${property}`, permission));
/**
 * Set a value for a given property on a new permission object
 * @param property - The name of the property
 * @param value - The value of the property
 * @param permission - The permission on which we want to set the property
 */
const setProperty = (property, value, permission) => {
    return (0, fp_1.set)(`properties.${property}`, value, permission);
};
exports.setProperty = setProperty;
/**
 * Returns a new permission without the given property name set
 * @param property - The name of the property to delete
 * @param permission - The permission on which we want to remove the property
 * @return {Permission}
 */
const deleteProperty = (property, permission) => (0, fp_1.omit)(`properties.${property}`, permission);
exports.deleteProperty = deleteProperty;
/**
 * Creates a new {@link Permission} object from raw attributes. Set default values for certain fields
 * @param  attributes
 */
const create = (attributes) => {
    return (0, fp_1.pipe)((0, fp_1.pick)(exports.permissionFields), (0, fp_1.merge)(getDefaultPermission()))(attributes);
};
exports.create = create;
/**
 * Using the given condition provider, check and remove invalid condition from the permission's condition array.
 * @param provider - The condition provider used to do the checks
 * @param permission - The condition to sanitize
 */
exports.sanitizeConditions = (0, fp_1.curry)((provider, permission) => {
    if (!(0, fp_1.isArray)(permission.conditions)) {
        return permission;
    }
    return permission.conditions
        .filter((condition) => !provider.has(condition))
        .reduce((perm, condition) => (0, exports.removeCondition)(condition, perm), permission);
});
/**
 * Transform raw attributes into valid permissions using the create domain function.
 * @param  payload - Can either be a single object of attributes or an array of those objects.
 */
const toPermission = (payload) => 
// @ts-expect-error
(0, fp_1.isArray)(payload) ? (0, fp_1.map)(exports.create, payload) : (0, exports.create)(payload);
exports.toPermission = toPermission;
exports.default = {
    addCondition: exports.addCondition,
    removeCondition: exports.removeCondition,
    create: exports.create,
    deleteProperty: exports.deleteProperty,
    permissionFields: exports.permissionFields,
    getProperty: exports.getProperty,
    sanitizedPermissionFields: exports.sanitizedPermissionFields,
    sanitizeConditions: exports.sanitizeConditions,
    sanitizePermissionFields: exports.sanitizePermissionFields,
    setProperty: exports.setProperty,
    toPermission: exports.toPermission,
};
//# sourceMappingURL=index.js.map