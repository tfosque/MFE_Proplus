"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("@strapi/utils");
const hasPermissions_1 = require("../validation/policies/hasPermissions");
const { createPolicy } = utils_1.policy;
const inputModifiers = [
    {
        check: lodash_1.default.isString,
        transform: (action) => ({ action }),
    },
    {
        check: lodash_1.default.isArray,
        transform: (arr) => ({ action: arr[0], subject: arr[1] }),
    },
    {
        // Has to be after the isArray check since _.isObject also matches arrays
        check: lodash_1.default.isObject,
        transform: (perm) => perm,
    },
];
exports.default = createPolicy({
    name: 'admin::hasPermissions',
    validator: hasPermissions_1.validateHasPermissionsInput,
    handler(ctx, config) {
        const { actions } = config;
        const { userAbility: ability } = ctx.state;
        const permissions = actions.map((action) => 
        // @ts-expect-error
        inputModifiers.find((modifier) => modifier.check(action)).transform(action));
        const isAuthorized = permissions.every(({ action, subject }) => ability.can(action, subject));
        return isAuthorized;
    },
});
//# sourceMappingURL=hasPermissions.js.map