"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateYupSchemaSync = exports.validateYupSchema = exports.handleYupError = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable no-template-curly-in-string */
const yup = __importStar(require("yup"));
const fp_1 = require("lodash/fp");
const errors_1 = require("./errors");
const handleYupError = (error, errorMessage) => {
    throw new errors_1.YupValidationError(error, errorMessage);
};
exports.handleYupError = handleYupError;
const defaultValidationParam = { strict: true, abortEarly: false };
const validateYupSchema = (schema, options = {}) => async (body, errorMessage) => {
    try {
        const optionsWithDefaults = (0, fp_1.defaults)(defaultValidationParam, options);
        const result = await schema.validate(body, optionsWithDefaults);
        return result;
    }
    catch (e) {
        if (e instanceof yup.ValidationError) {
            handleYupError(e, errorMessage);
        }
        throw e;
    }
};
exports.validateYupSchema = validateYupSchema;
const validateYupSchemaSync = (schema, options = {}) => (body, errorMessage) => {
    try {
        const optionsWithDefaults = (0, fp_1.defaults)(defaultValidationParam, options);
        return schema.validateSync(body, optionsWithDefaults);
    }
    catch (e) {
        if (e instanceof yup.ValidationError) {
            handleYupError(e, errorMessage);
        }
        throw e;
    }
};
exports.validateYupSchemaSync = validateYupSchemaSync;
//# sourceMappingURL=validators.js.map