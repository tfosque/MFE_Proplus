"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const data_transfer_1 = require("../data-transfer");
const helpers_1 = require("../helpers");
const engine_1 = require("../../engine");
const strapiDatatransfer = __importStar(require("../../strapi"));
const file = __importStar(require("../../file"));
const { providers: { createLocalFileDestinationProvider }, } = file;
const { providers: { createLocalStrapiSourceProvider }, } = strapiDatatransfer;
const BYTES_IN_MB = 1024 * 1024;
/**
 * Export command.
 *
 * It transfers data from a local Strapi instance to a file
 *
 * @param {ExportCommandOptions} opts
 */
exports.default = async (opts) => {
    // Validate inputs from Commander
    if (!(0, fp_1.isObject)(opts)) {
        (0, helpers_1.exitWith)(1, 'Could not parse command arguments');
    }
    const strapi = await (0, data_transfer_1.createStrapiInstance)();
    const source = createSourceProvider(strapi);
    const destination = createDestinationProvider(opts);
    const engine = (0, engine_1.createTransferEngine)(source, destination, {
        versionStrategy: 'ignore',
        schemaStrategy: 'ignore',
        exclude: opts.exclude,
        only: opts.only,
        throttle: opts.throttle,
        transforms: {
            links: [
                {
                    filter(link) {
                        return (!data_transfer_1.DEFAULT_IGNORED_CONTENT_TYPES.includes(link.left.type) &&
                            !data_transfer_1.DEFAULT_IGNORED_CONTENT_TYPES.includes(link.right.type));
                    },
                },
            ],
            entities: [
                {
                    filter(entity) {
                        return !data_transfer_1.DEFAULT_IGNORED_CONTENT_TYPES.includes(entity.type);
                    },
                },
            ],
        },
    });
    engine.diagnostics.onDiagnostic((0, data_transfer_1.formatDiagnostic)('export'));
    const progress = engine.progress.stream;
    const { updateLoader } = (0, data_transfer_1.loadersFactory)();
    progress.on(`stage::start`, ({ stage, data }) => {
        updateLoader(stage, data).start();
    });
    progress.on('stage::finish', ({ stage, data }) => {
        updateLoader(stage, data).succeed();
    });
    progress.on('stage::progress', ({ stage, data }) => {
        updateLoader(stage, data);
    });
    progress.on('transfer::start', async () => {
        console.log(`Starting export...`);
        await strapi.telemetry.send('didDEITSProcessStart', (0, data_transfer_1.getTransferTelemetryPayload)(engine));
    });
    let results;
    let outFile;
    try {
        // Abort transfer if user interrupts process
        (0, data_transfer_1.setSignalHandler)(() => (0, data_transfer_1.abortTransfer)({ engine, strapi }));
        results = await engine.transfer();
        outFile = results.destination?.file?.path ?? '';
        const outFileExists = await fs_extra_1.default.pathExists(outFile);
        if (!outFileExists) {
            throw new engine_1.errors.TransferEngineTransferError(`Export file not created "${outFile}"`);
        }
        // Note: we need to await telemetry or else the process ends before it is sent
        await strapi.telemetry.send('didDEITSProcessFinish', (0, data_transfer_1.getTransferTelemetryPayload)(engine));
        try {
            const table = (0, data_transfer_1.buildTransferTable)(results.engine);
            console.log(table?.toString());
        }
        catch (e) {
            console.error('There was an error displaying the results of the transfer.');
        }
        console.log(`Export archive is in ${chalk_1.default.green(outFile)}`);
        (0, helpers_1.exitWith)(0, (0, data_transfer_1.exitMessageText)('export'));
    }
    catch {
        await strapi.telemetry.send('didDEITSProcessFail', (0, data_transfer_1.getTransferTelemetryPayload)(engine));
        (0, helpers_1.exitWith)(1, (0, data_transfer_1.exitMessageText)('export', true));
    }
};
/**
 * It creates a local strapi destination provider
 */
const createSourceProvider = (strapi) => {
    return createLocalStrapiSourceProvider({
        async getStrapi() {
            return strapi;
        },
    });
};
/**
 * It creates a local file destination provider based on the given options
 */
const createDestinationProvider = (opts) => {
    const { file, compress, encrypt, key, maxSizeJsonl } = opts;
    const filepath = (0, fp_1.isString)(file) && file.length > 0 ? file : (0, data_transfer_1.getDefaultExportName)();
    const maxSizeJsonlInMb = (0, fp_1.isFinite)((0, fp_1.toNumber)(maxSizeJsonl))
        ? (0, fp_1.toNumber)(maxSizeJsonl) * BYTES_IN_MB
        : undefined;
    return createLocalFileDestinationProvider({
        file: {
            path: filepath,
            maxSizeJsonl: maxSizeJsonlInMb,
        },
        encryption: {
            enabled: encrypt ?? false,
            key: encrypt ? key : undefined,
        },
        compression: {
            enabled: compress ?? false,
        },
    });
};
//# sourceMappingURL=action.js.map