"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const commander_1 = require("commander");
const inquirer_1 = __importDefault(require("inquirer"));
const data_transfer_1 = require("../data-transfer");
const commander_2 = require("../commander");
const helpers_1 = require("../helpers");
const action_1 = __importDefault(require("./action"));
/**
 * `$ strapi import`
 */
const command = ({ command }) => {
    command
        .command('import')
        .description('Import data from file to Strapi')
        .allowExcessArguments(false)
        .requiredOption('-f, --file <file>', 'path and filename for the Strapi export file you want to import')
        .addOption(new commander_1.Option('-k, --key <string>', 'Provide encryption key in command instead of using the prompt'))
        .addOption(commander_2.forceOption)
        .addOption(data_transfer_1.excludeOption)
        .addOption(data_transfer_1.onlyOption)
        .addOption(data_transfer_1.throttleOption)
        .hook('preAction', data_transfer_1.validateExcludeOnly)
        .hook('preAction', async (thisCommand) => {
        const opts = thisCommand.opts();
        const ext = path_1.default.extname(String(opts.file));
        // check extension to guess if we should prompt for key
        if (ext === '.enc') {
            if (!opts.key) {
                const answers = await inquirer_1.default.prompt([
                    {
                        type: 'password',
                        message: 'Please enter your decryption key',
                        name: 'key',
                    },
                ]);
                if (!answers.key?.length) {
                    (0, helpers_1.exitWith)(1, 'No key entered, aborting import.');
                }
                opts.key = answers.key;
            }
        }
    })
        // set decrypt and decompress options based on filename
        .hook('preAction', (thisCommand) => {
        const opts = thisCommand.opts();
        const { extname, parse } = path_1.default;
        let file = opts.file;
        if (extname(file) === '.enc') {
            file = parse(file).name; // trim the .enc extension
            thisCommand.opts().decrypt = true;
        }
        else {
            thisCommand.opts().decrypt = false;
        }
        if (extname(file) === '.gz') {
            file = parse(file).name; // trim the .gz extension
            thisCommand.opts().decompress = true;
        }
        else {
            thisCommand.opts().decompress = false;
        }
        if (extname(file) !== '.tar') {
            (0, helpers_1.exitWith)(1, `The file '${opts.file}' does not appear to be a valid Strapi data file. It must have an extension ending in .tar[.gz][.enc]`);
        }
    })
        .hook('preAction', (0, commander_2.getCommanderConfirmMessage)('The import will delete your existing data! Are you sure you want to proceed?', { failMessage: 'Import process aborted' }))
        .action(action_1.default);
};
exports.default = command;
//# sourceMappingURL=command.js.map