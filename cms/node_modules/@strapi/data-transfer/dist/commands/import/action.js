"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const data_transfer_1 = require("../data-transfer");
const helpers_1 = require("../helpers");
const engine = __importStar(require("../../engine"));
const strapiDatatransfer = __importStar(require("../../strapi"));
const file = __importStar(require("../../file"));
const { providers: { createLocalFileSourceProvider }, } = file;
const { providers: { createLocalStrapiDestinationProvider, DEFAULT_CONFLICT_STRATEGY }, } = strapiDatatransfer;
const { createTransferEngine, DEFAULT_VERSION_STRATEGY, DEFAULT_SCHEMA_STRATEGY } = engine;
/**
 * Import command.
 *
 * It transfers data from a file to a local Strapi instance
 */
exports.default = async (opts) => {
    // validate inputs from Commander
    if (!(0, fp_1.isObject)(opts)) {
        (0, helpers_1.exitWith)(1, 'Could not parse arguments');
    }
    /**
     * From strapi backup file
     */
    const sourceOptions = getLocalFileSourceOptions(opts);
    const source = createLocalFileSourceProvider(sourceOptions);
    /**
     * To local Strapi instance
     */
    const strapiInstance = await (0, data_transfer_1.createStrapiInstance)();
    /**
     * Configure and run the transfer engine
     */
    const engineOptions = {
        versionStrategy: DEFAULT_VERSION_STRATEGY,
        schemaStrategy: DEFAULT_SCHEMA_STRATEGY,
        exclude: opts.exclude,
        only: opts.only,
        throttle: opts.throttle,
        transforms: {
            links: [
                {
                    filter(link) {
                        return (!data_transfer_1.DEFAULT_IGNORED_CONTENT_TYPES.includes(link.left.type) &&
                            !data_transfer_1.DEFAULT_IGNORED_CONTENT_TYPES.includes(link.right.type));
                    },
                },
            ],
            entities: [
                {
                    filter: (entity) => !data_transfer_1.DEFAULT_IGNORED_CONTENT_TYPES.includes(entity.type),
                },
            ],
        },
    };
    const destinationOptions = {
        async getStrapi() {
            return strapiInstance;
        },
        autoDestroy: false,
        strategy: opts.conflictStrategy || DEFAULT_CONFLICT_STRATEGY,
        restore: (0, data_transfer_1.parseRestoreFromOptions)(engineOptions),
    };
    const destination = createLocalStrapiDestinationProvider(destinationOptions);
    const engine = createTransferEngine(source, destination, engineOptions);
    engine.diagnostics.onDiagnostic((0, data_transfer_1.formatDiagnostic)('import'));
    const progress = engine.progress.stream;
    const { updateLoader } = (0, data_transfer_1.loadersFactory)();
    engine.onSchemaDiff((0, data_transfer_1.getDiffHandler)(engine, { force: opts.force, action: 'import' }));
    progress.on(`stage::start`, ({ stage, data }) => {
        updateLoader(stage, data).start();
    });
    progress.on('stage::finish', ({ stage, data }) => {
        updateLoader(stage, data).succeed();
    });
    progress.on('stage::progress', ({ stage, data }) => {
        updateLoader(stage, data);
    });
    progress.on('transfer::start', async () => {
        console.log('Starting import...');
        await strapiInstance.telemetry.send('didDEITSProcessStart', (0, data_transfer_1.getTransferTelemetryPayload)(engine));
    });
    let results;
    try {
        // Abort transfer if user interrupts process
        (0, data_transfer_1.setSignalHandler)(() => (0, data_transfer_1.abortTransfer)({ engine, strapi: strapi }));
        results = await engine.transfer();
        try {
            const table = (0, data_transfer_1.buildTransferTable)(results.engine);
            console.log(table?.toString());
        }
        catch (e) {
            console.error('There was an error displaying the results of the transfer.');
        }
        // Note: we need to await telemetry or else the process ends before it is sent
        await strapiInstance.telemetry.send('didDEITSProcessFinish', (0, data_transfer_1.getTransferTelemetryPayload)(engine));
        await strapiInstance.destroy();
        (0, helpers_1.exitWith)(0, (0, data_transfer_1.exitMessageText)('import'));
    }
    catch (e) {
        await strapiInstance.telemetry.send('didDEITSProcessFail', (0, data_transfer_1.getTransferTelemetryPayload)(engine));
        (0, helpers_1.exitWith)(1, (0, data_transfer_1.exitMessageText)('import', true));
    }
};
/**
 * Infer local file source provider options based on a given filename
 */
const getLocalFileSourceOptions = (opts) => {
    const options = {
        file: { path: opts.file ?? '' },
        compression: { enabled: !!opts.decompress },
        encryption: { enabled: !!opts.decrypt, key: opts.key },
    };
    return options;
};
//# sourceMappingURL=action.js.map