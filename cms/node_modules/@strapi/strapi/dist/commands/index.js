"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.strapiCommands = exports.buildStrapiCommand = exports.runStrapiCommand = void 0;
const commander_1 = require("commander");
const command_1 = __importDefault(require("./actions/admin/create-user/command"));
const command_2 = __importDefault(require("./actions/admin/reset-user-password/command"));
const command_3 = __importDefault(require("./actions/build-command/command")); // in 'build-command' to avoid problems with 'build' being commonly ignored
const command_4 = __importDefault(require("./actions/components/list/command"));
const command_5 = __importDefault(require("./actions/configuration/dump/command"));
const command_6 = __importDefault(require("./actions/configuration/restore/command"));
const command_7 = __importDefault(require("./actions/console/command"));
const command_8 = __importDefault(require("./actions/content-types/list/command"));
const command_9 = __importDefault(require("./actions/controllers/list/command"));
const command_10 = __importDefault(require("./actions/develop/command"));
const command_11 = __importDefault(require("./actions/generate/command"));
const command_12 = __importDefault(require("./actions/hooks/list/command"));
const command_13 = __importDefault(require("./actions/install/command"));
const command_14 = __importDefault(require("./actions/middlewares/list/command"));
const command_15 = __importDefault(require("./actions/new/command"));
const command_16 = __importDefault(require("./actions/policies/list/command"));
const command_17 = __importDefault(require("./actions/report/command"));
const command_18 = __importDefault(require("./actions/routes/list/command"));
const command_19 = __importDefault(require("./actions/services/list/command"));
const command_20 = __importDefault(require("./actions/start/command"));
const command_21 = __importDefault(require("./actions/telemetry/disable/command"));
const command_22 = __importDefault(require("./actions/telemetry/enable/command"));
const command_23 = __importDefault(require("./actions/templates/generate/command"));
const command_24 = __importDefault(require("./actions/ts/generate-types/command"));
const command_25 = __importDefault(require("./actions/uninstall/command"));
const command_26 = __importDefault(require("./actions/version/command"));
const command_27 = __importDefault(require("./actions/watch-admin/command"));
const command_28 = __importDefault(require("./actions/plugin/build-command/command"));
const strapiCommands = {
    createAdminUser: command_1.default,
    resetAdminUserPassword: command_2.default,
    buildCommand: command_3.default,
    listComponents: command_4.default,
    configurationDump: command_5.default,
    configurationRestore: command_6.default,
    consoleCommand: command_7.default,
    listContentTypes: command_8.default,
    listControllers: command_9.default,
    developCommand: command_10.default,
    generateCommand: command_11.default,
    listHooks: command_12.default,
    installCommand: command_13.default,
    listMiddlewares: command_14.default,
    newCommand: command_15.default,
    listPolicies: command_16.default,
    reportCommand: command_17.default,
    listRoutes: command_18.default,
    listServices: command_19.default,
    startCommand: command_20.default,
    disableTelemetry: command_21.default,
    enableTelemetry: command_22.default,
    generateTemplates: command_23.default,
    generateTsTypes: command_24.default,
    uninstallCommand: command_25.default,
    versionCommand: command_26.default,
    watchAdminCommand: command_27.default,
    buildPluginCommand: command_28.default,
};
exports.strapiCommands = strapiCommands;
const buildStrapiCommand = (argv, command = new commander_1.Command()) => {
    try {
        // NOTE: this is a hack to allow loading dts commands without make dts a dependency of strapi and thus avoiding circular dependencies
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const dtsCommands = require(require.resolve('@strapi/data-transfer')).commands;
        Object.assign(strapiCommands, dtsCommands);
    }
    catch (e) {
        // noop
    }
    // Initial program setup
    command.storeOptionsAsProperties(false).allowUnknownOption(true);
    // Help command
    command.helpOption('-h, --help', 'Display help for command');
    command.addHelpCommand('help [command]', 'Display help for command');
    const keys = Object.keys(strapiCommands);
    // Load all commands
    keys.forEach((name) => {
        try {
            // Add this command to the Commander command object
            strapiCommands[name]({ command, argv });
        }
        catch (e) {
            console.error(`Failed to load command ${name}`, e);
        }
    });
    return command;
};
exports.buildStrapiCommand = buildStrapiCommand;
const runStrapiCommand = async (argv = process.argv, command = new commander_1.Command()) => {
    await buildStrapiCommand(argv, command).parseAsync(argv);
};
exports.runStrapiCommand = runStrapiCommand;
//# sourceMappingURL=index.js.map