"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const ora_1 = __importDefault(require("ora"));
const execa_1 = __importDefault(require("execa"));
const inquirer_1 = __importDefault(require("inquirer"));
const package_path_1 = __importDefault(require("../../../load/package-path"));
exports.default = async (plugins, { deleteFiles }) => {
    const answers = await inquirer_1.default.prompt([
        {
            type: 'confirm',
            name: 'deleteFiles',
            message: `Do you want to delete the plugin generated files in the extensions folder ?`,
            default: true,
            when: !deleteFiles,
        },
    ]);
    const loader = (0, ora_1.default)();
    const dir = process.cwd();
    const pluginArgs = plugins.map((name) => `@strapi/plugin-${name}`);
    try {
        // verify should rebuild before removing the pacakge
        let shouldRebuild = false;
        for (const name of plugins) {
            const pkgPath = (0, package_path_1.default)(`@strapi/plugin-${name}`);
            if ((0, fs_extra_1.existsSync)((0, path_1.join)(pkgPath, 'admin', 'src', 'index.js'))) {
                shouldRebuild = true;
            }
        }
        loader.start(`Uninstalling dependencies`);
        const useYarn = (0, fs_extra_1.existsSync)((0, path_1.join)(dir, 'yarn.lock'));
        if (useYarn) {
            await (0, execa_1.default)('yarn', ['remove', ...pluginArgs]);
        }
        else {
            await (0, execa_1.default)('npm', ['remove', ...pluginArgs]);
        }
        loader.succeed();
        if (deleteFiles === true || answers.deleteFiles === true) {
            loader.start('Deleting old files');
            for (const name of plugins) {
                const pluginDir = (0, path_1.join)(dir, 'extensions', name);
                if ((0, fs_extra_1.existsSync)(pluginDir)) {
                    (0, fs_extra_1.removeSync)(pluginDir);
                }
            }
            loader.succeed();
        }
        if (shouldRebuild) {
            loader.start(`Rebuilding admin UI`);
            await (0, execa_1.default)('npm', ['run', 'build']);
            loader.succeed();
        }
    }
    catch (err) {
        loader.clear();
        if (err instanceof Error) {
            console.error(err.message);
        }
        process.exit(1);
    }
};
//# sourceMappingURL=action.js.map