"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const inquirer_1 = __importDefault(require("inquirer"));
const index_1 = __importDefault(require("../../../../index"));
const promptQuestions = [
    { type: 'input', name: 'email', message: 'User email?' },
    { type: 'password', name: 'password', message: 'New password?' },
    {
        type: 'confirm',
        name: 'confirm',
        message: "Do you really want to reset this user's password?",
    },
];
/**
 * Reset user's password
 */
exports.default = async (cmdOptions = {}) => {
    const { email, password } = cmdOptions;
    if (lodash_1.default.isEmpty(email) && lodash_1.default.isEmpty(password) && process.stdin.isTTY) {
        const inquiry = await inquirer_1.default.prompt(promptQuestions);
        if (!inquiry.confirm) {
            process.exit(0);
        }
        return changePassword(inquiry);
    }
    if (lodash_1.default.isEmpty(email) || lodash_1.default.isEmpty(password)) {
        console.error('Missing required options `email` or `password`');
        process.exit(1);
    }
    return changePassword({ email, password });
};
async function changePassword({ email, password }) {
    const appContext = await index_1.default.compile();
    const app = await (0, index_1.default)(appContext).load();
    await app.admin.services.user.resetPasswordByEmail(email, password);
    console.log(`Successfully reset user's password`);
    process.exit(0);
}
//# sourceMappingURL=action.js.map