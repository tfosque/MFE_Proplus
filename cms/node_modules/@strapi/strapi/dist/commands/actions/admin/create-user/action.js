"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@strapi/utils");
const lodash_1 = __importDefault(require("lodash"));
const inquirer_1 = __importDefault(require("inquirer"));
const index_1 = __importDefault(require("../../../../index"));
const emailValidator = utils_1.yup.string().email('Invalid email address').lowercase();
const passwordValidator = utils_1.yup
    .string()
    .min(8, 'Password must be at least 8 characters long')
    .matches(/[a-z]/, 'Password must contain at least one lowercase character')
    .matches(/[A-Z]/, 'Password must contain at least one uppercase character')
    .matches(/\d/, 'Password must contain at least one number');
const adminCreateSchema = utils_1.yup.object().shape({
    email: emailValidator,
    password: passwordValidator,
    firstname: utils_1.yup.string().trim().required('First name is required'),
    lastname: utils_1.yup.string(),
});
const promptQuestions = [
    {
        type: 'input',
        name: 'email',
        message: 'Admin email?',
        async validate(value) {
            const validEmail = await emailValidator.validate(value);
            return validEmail === value || validEmail;
        },
    },
    {
        type: 'password',
        name: 'password',
        message: 'Admin password?',
        async validate(value) {
            const validPassword = await passwordValidator.validate(value);
            return validPassword === value || validPassword;
        },
    },
    { type: 'input', name: 'firstname', message: 'First name?' },
    { type: 'input', name: 'lastname', message: 'Last name?' },
    {
        type: 'confirm',
        name: 'confirm',
        message: 'Do you really want to create a new admin?',
    },
];
/**
 * Create new admin user
 */
exports.default = async (cmdOptions = {}) => {
    let { email, password, firstname, lastname } = cmdOptions;
    if (lodash_1.default.isEmpty(email) &&
        lodash_1.default.isEmpty(password) &&
        lodash_1.default.isEmpty(firstname) &&
        lodash_1.default.isEmpty(lastname) &&
        process.stdin.isTTY) {
        const inquiry = await inquirer_1.default.prompt(promptQuestions);
        if (!inquiry.confirm) {
            process.exit(0);
        }
        ({ email, password, firstname, lastname } = inquiry);
    }
    try {
        await adminCreateSchema.validate({ email, password, firstname, lastname });
    }
    catch (err) {
        if (err instanceof utils_1.yup.ValidationError) {
            console.error(err.errors[0]);
        }
        process.exit(1);
    }
    return createAdmin({ email, password, firstname, lastname });
};
async function createAdmin({ email, password, firstname, lastname }) {
    const appContext = await index_1.default.compile();
    const app = await (0, index_1.default)(appContext).load();
    const user = await app.admin.services.user.exists({ email });
    if (user) {
        console.error(`User with email "${email}" already exists`);
        process.exit(1);
    }
    const superAdminRole = await app.admin.services.role.getSuperAdmin();
    await app.admin.services.user.create({
        email,
        firstname,
        lastname,
        isActive: true,
        roles: [superAdminRole.id],
        ...(password && { password, registrationToken: null }),
    });
    console.log(`Successfully created new admin`);
    process.exit(0);
}
//# sourceMappingURL=action.js.map