"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("fs/promises"));
const boxen_1 = __importDefault(require("boxen"));
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const logger_1 = require("../../../utils/logger");
const helpers_1 = require("../../../utils/helpers");
const pkg_1 = require("../../../utils/pkg");
const packages_1 = require("../../../builders/packages");
const tasks_1 = require("../../../builders/tasks");
exports.default = async ({ force, debug }) => {
    const logger = (0, logger_1.createLogger)({ debug, timestamp: false });
    try {
        /**
         * Notify users this is an experimental command and get them to approve first
         * this can be opted out by setting the argument --yes
         */
        await (0, helpers_1.notifyExperimentalCommand)({ force });
        const cwd = process.cwd();
        /**
         * Load the closest package.json and then verify the structure against what we expect.
         */
        const packageJsonLoader = (0, ora_1.default)('Verifying package.json \n').start();
        const rawPkg = await (0, pkg_1.loadPkg)({ cwd, logger }).catch((err) => {
            packageJsonLoader.fail();
            logger.error(err.message);
            logger.debug(`Path checked â€“ ${cwd}`);
            process.exit(1);
        });
        const validatedPkg = await (0, pkg_1.validatePkg)({
            pkg: rawPkg,
        }).catch((err) => {
            packageJsonLoader.fail();
            logger.error(err.message);
            process.exit(1);
        });
        /**
         * Validate the exports of the package incl. the order of the
         * exports within the exports map if applicable
         */
        const packageJson = await (0, pkg_1.validateExportsOrdering)({ pkg: validatedPkg, logger }).catch((err) => {
            packageJsonLoader.fail();
            logger.error(err.message);
            process.exit(1);
        });
        packageJsonLoader.succeed('Verified package.json');
        /**
         * We create tasks based on the exports of the package.json
         * their handlers are then ran in the order of the exports map
         * and results are logged to see gradual progress.
         */
        const buildContextLoader = (0, ora_1.default)('Creating build context \n').start();
        const extMap = (0, pkg_1.getExportExtensionMap)();
        const ctx = await (0, packages_1.createBuildContext)({
            cwd,
            extMap,
            logger,
            pkg: packageJson,
        }).catch((err) => {
            buildContextLoader.fail();
            logger.error(err.message);
            process.exit(1);
        });
        logger.debug('Build context: \n', ctx);
        const buildTasks = await (0, packages_1.createBuildTasks)(ctx);
        buildContextLoader.succeed('Created build context');
        /**
         * If the distPath already exists, clean it
         */
        try {
            logger.debug(`Cleaning dist folder: ${ctx.distPath}`);
            await promises_1.default.rm(ctx.distPath, { recursive: true, force: true });
            logger.debug('Cleaned dist folder');
        }
        catch {
            // do nothing, it will fail if the folder does not exist
            logger.debug('There was no dist folder to clean');
        }
        for (const task of buildTasks) {
            const handler = (0, tasks_1.buildTaskHandlers)(task);
            handler.print(ctx, task);
            await handler.run(ctx, task).catch((err) => {
                if (err instanceof Error) {
                    logger.error(err.message);
                }
                process.exit(1);
            });
        }
    }
    catch (err) {
        logger.error('There seems to be an unexpected error, try again with --debug for more information \n');
        if (err instanceof Error && err.stack) {
            console.log(chalk_1.default.red((0, boxen_1.default)(err.stack, {
                padding: 1,
                align: 'left',
            })));
        }
        process.exit(1);
    }
};
//# sourceMappingURL=action.js.map