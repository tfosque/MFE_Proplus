"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const machine_id_1 = __importDefault(require("../../../../utils/machine-id"));
const readPackageJSON = async (path) => {
    try {
        const packageObj = await fs_extra_1.default.readJson(path);
        const uuid = packageObj.strapi ? packageObj.strapi.uuid : null;
        return { uuid, packageObj };
    }
    catch (err) {
        if (err instanceof Error) {
            console.error(`${chalk_1.default.red('Error')}: ${err.message}`);
        }
    }
};
const writePackageJSON = async (path, file, spacing) => {
    try {
        await fs_extra_1.default.writeJson(path, file, { spaces: spacing });
        return true;
    }
    catch (err) {
        if (err instanceof Error) {
            console.error(`${chalk_1.default.red('Error')}: ${err.message}`);
        }
    }
};
const sendEvent = async (uuid) => {
    try {
        const event = 'didOptOutTelemetry';
        await (0, node_fetch_1.default)('https://analytics.strapi.io/api/v2/track', {
            method: 'POST',
            body: JSON.stringify({
                event,
                deviceId: (0, machine_id_1.default)(),
                groupProperties: { projectId: uuid },
            }),
            headers: {
                'Content-Type': 'application/json',
                'X-Strapi-Event': event,
            },
        });
    }
    catch (e) {
        // ...
    }
};
async function optOutTelemetry() {
    const packageJSONPath = (0, path_1.resolve)(process.cwd(), 'package.json');
    const exists = await fs_extra_1.default.pathExists(packageJSONPath);
    if (!exists) {
        console.log(`${chalk_1.default.yellow('Warning')}: could not find package.json`);
        process.exit(0);
    }
    const { uuid, packageObj } = (await readPackageJSON(packageJSONPath)) ?? {};
    if ((packageObj.strapi && packageObj.strapi.telemetryDisabled) || !uuid) {
        console.log(`${chalk_1.default.yellow('Warning:')} telemetry is already disabled`);
        process.exit(0);
    }
    const updatedPackageJSON = {
        ...packageObj,
        strapi: {
            ...packageObj.strapi,
            telemetryDisabled: true,
        },
    };
    const write = await writePackageJSON(packageJSONPath, updatedPackageJSON, 2);
    if (!write) {
        console.log(`${chalk_1.default.yellow('Warning')}: There has been an error, please set "telemetryDisabled": true in the "strapi" object of your package.json manually.`);
        process.exit(0);
    }
    await sendEvent(uuid);
    console.log(`${chalk_1.default.green('Successfully opted out of Strapi telemetry')}`);
    process.exit(0);
}
exports.default = optOutTelemetry;
//# sourceMappingURL=action.js.map