"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
// All directories that a template could need
const TEMPLATE_CONTENT = ['src', 'data'];
async function copyContent(templatePath, rootBase) {
    for (const item of TEMPLATE_CONTENT) {
        try {
            const pathToCopy = (0, path_1.join)(process.cwd(), item);
            if (!(await fs_extra_1.default.pathExists(pathToCopy))) {
                continue;
            }
            await fs_extra_1.default.copy(pathToCopy, (0, path_1.join)(templatePath, item));
            const currentProjectBase = (0, path_1.basename)(process.cwd());
            console.log(`${chalk_1.default.green('success')}: copy ${currentProjectBase}/${item} => ${rootBase}/template/${item}`);
        }
        catch (error) {
            if (error instanceof Error) {
                console.error(`${chalk_1.default.red('error')}: ${error.message}`);
            }
        }
    }
}
/**
 *
 * @param {string} rootPath Absolute path to the root directory
 */
async function writeTemplateJson(rootPath) {
    try {
        await fs_extra_1.default.writeJSON((0, path_1.join)(rootPath, 'template.json'), {});
        console.log(`${chalk_1.default.green('success')}: create JSON config file`);
    }
    catch (error) {
        if (error instanceof Error) {
            console.error(`${chalk_1.default.red('error')}: ${error.message}`);
        }
    }
}
/**
 *
 * @param {string} rootPath Absolute path to the root directory
 * @returns boolean
 */
async function templateConfigExists(rootPath) {
    const configExists = await fs_extra_1.default.pathExists((0, path_1.join)(rootPath, 'template.json'));
    console.log(`checking: ${(0, path_1.join)(rootPath, 'template.json')}. result ${configExists}`);
    return configExists;
}
async function generateTemplate(directory) {
    const rootPath = (0, path_1.resolve)(directory);
    // Get path to template directory: <rootPath>/template
    const templatePath = (0, path_1.join)(rootPath, 'template');
    // Check if the template directory exists
    const exists = await fs_extra_1.default.pathExists(templatePath);
    const rootBase = (0, path_1.basename)(rootPath);
    if (exists) {
        // Confirm the user wants to replace the existing template
        const inquiry = await inquirer_1.default.prompt({
            type: 'confirm',
            name: 'confirm',
            message: `${chalk_1.default.yellow(rootBase)} already exists.  Do you want to replace it?`,
        });
        if (!inquiry.confirm) {
            process.exit(0);
        }
    }
    // Create or replace root directory with <roothPath>/template
    await fs_extra_1.default.ensureDir(templatePath);
    // Copy content to /template
    await copyContent(templatePath, rootBase);
    // Create config file if it doesn't exist
    const configExists = await templateConfigExists(rootPath);
    if (!configExists) {
        await writeTemplateJson(rootPath);
    }
    console.log(`${chalk_1.default.green('success')}: generated template at ${chalk_1.default.yellow(rootPath)}`);
}
exports.default = generateTemplate;
//# sourceMappingURL=action.js.map