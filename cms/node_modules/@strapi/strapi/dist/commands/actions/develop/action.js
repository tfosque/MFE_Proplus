"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const cluster_1 = __importDefault(require("cluster"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chokidar_1 = __importDefault(require("chokidar"));
const execa_1 = __importDefault(require("execa"));
const fp_1 = require("lodash/fp");
const utils_1 = require("@strapi/utils");
const typescript_utils_1 = __importDefault(require("@strapi/typescript-utils"));
const app_configuration_1 = __importDefault(require("../../../core/app-configuration"));
const index_1 = __importDefault(require("../../../index"));
const builders_1 = require("../../builders");
/**
 * `$ strapi develop`
 *
 */
exports.default = async ({ build, watchAdmin, polling, browser }) => {
    const appDir = process.cwd();
    const isTSProject = await typescript_utils_1.default.isUsingTypeScript(appDir);
    const outDir = await typescript_utils_1.default.resolveOutDir(appDir);
    const distDir = isTSProject ? outDir : appDir;
    try {
        if (cluster_1.default.isMaster || cluster_1.default.isPrimary) {
            return await primaryProcess({
                distDir,
                appDir,
                build,
                browser,
                isTSProject,
                watchAdmin,
            });
        }
        if (cluster_1.default.isWorker) {
            return await workerProcess({ appDir, distDir, watchAdmin, polling, isTSProject });
        }
    }
    catch (e) {
        console.error(e);
        process.exit(1);
    }
};
const primaryProcess = async ({ distDir, appDir, build, isTSProject, watchAdmin, browser, }) => {
    if (isTSProject) {
        await (0, builders_1.buildTypeScript)({ srcDir: appDir, distDir, ignoreDiagnostics: true });
    }
    const config = (0, app_configuration_1.default)({ app: appDir, dist: distDir });
    const serveAdminPanel = (0, fp_1.getOr)(true, 'admin.serveAdminPanel', config);
    const buildExists = fs_extra_1.default.existsSync(path_1.default.join(distDir, 'build'));
    // Don't run the build process if the admin is in watch mode
    if (build && !watchAdmin && serveAdminPanel && !buildExists) {
        try {
            await (0, builders_1.buildAdmin)({
                buildDestDir: distDir,
                forceBuild: false,
                optimization: false,
                srcDir: appDir,
            });
        }
        catch (err) {
            process.exit(1);
        }
    }
    if (watchAdmin) {
        try {
            (0, execa_1.default)('npm', ['run', '-s', 'strapi', 'watch-admin', '--', '--browser', browser ? 'true' : 'false'], {
                stdio: 'inherit',
            });
        }
        catch (err) {
            process.exit(1);
        }
    }
    cluster_1.default.on('message', async (worker, message) => {
        switch (message) {
            case 'reload':
                if (isTSProject) {
                    await (0, builders_1.buildTypeScript)({ srcDir: appDir, distDir, ignoreDiagnostics: true });
                }
                console.info('The server is restarting\n');
                worker.send('kill');
                break;
            case 'killed':
                cluster_1.default.fork();
                break;
            case 'stop':
                process.exit(1);
                break;
            default: {
                break;
            }
        }
    });
    cluster_1.default.fork();
};
const workerProcess = async ({ appDir, distDir, watchAdmin, polling, isTSProject, }) => {
    const strapiInstance = await (0, index_1.default)({
        distDir,
        autoReload: true,
        serveAdminPanel: !watchAdmin,
    }).load();
    await typescript_utils_1.default.generators.generate({
        strapi: strapiInstance,
        pwd: appDir,
        rootDir: undefined,
        logger: { silent: true, debug: false },
        artifacts: { contentTypes: true, components: true },
    });
    if (isTSProject) {
        await (0, builders_1.buildTypeScript)({ srcDir: appDir, distDir, ignoreDiagnostics: false });
    }
    const adminWatchIgnoreFiles = strapiInstance.config.get('admin.watchIgnoreFiles', []);
    watchFileChanges({
        appDir,
        strapiInstance,
        watchIgnoreFiles: adminWatchIgnoreFiles,
        polling,
    });
    process.on('message', async (message) => {
        switch (message) {
            case 'kill': {
                await strapiInstance.destroy();
                process.send?.('killed');
                process.exit();
                break;
            }
            default: {
                break;
            }
            // Do nothing.
        }
    });
    return strapiInstance.start();
};
/**
 * Init file watching to auto restart strapi app
 */
function watchFileChanges({ appDir, strapiInstance, watchIgnoreFiles, polling, }) {
    const restart = async () => {
        if (strapiInstance.reload.isWatching && !strapiInstance.reload.isReloading) {
            strapiInstance.reload.isReloading = true;
            strapiInstance.reload();
        }
    };
    const watcher = chokidar_1.default.watch(appDir, {
        ignoreInitial: true,
        usePolling: polling,
        ignored: [
            /(^|[/\\])\../,
            /tmp/,
            '**/src/admin/**',
            '**/src/plugins/**/admin/**',
            '**/dist/src/plugins/test/admin/**',
            '**/documentation',
            '**/documentation/**',
            '**/node_modules',
            '**/node_modules/**',
            '**/plugins.json',
            '**/build',
            '**/build/**',
            '**/index.html',
            '**/public',
            '**/public/**',
            strapiInstance.dirs.static.public,
            (0, utils_1.joinBy)('/', strapiInstance.dirs.static.public, '**'),
            '**/*.db*',
            '**/exports/**',
            '**/dist/**',
            '**/*.d.ts',
            ...watchIgnoreFiles,
        ],
    });
    watcher
        .on('add', (path) => {
        strapiInstance.log.info(`File created: ${path}`);
        restart();
    })
        .on('change', (path) => {
        strapiInstance.log.info(`File changed: ${path}`);
        restart();
    })
        .on('unlink', (path) => {
        strapiInstance.log.info(`File deleted: ${path}`);
        restart();
    });
}
//# sourceMappingURL=action.js.map