/**
 * `$ strapi start`
 */
declare const _default: () => Promise<{
    server: import("@strapi/types/dist/modules/server").Server;
    container: import("@strapi/types/dist/container").Container;
    log: import("winston").Logger;
    fs: import("@strapi/types").StrapiFS;
    eventHub: import("@strapi/types/dist/modules/event-hub").EventHub;
    startupLogger: import("@strapi/types").StartupLogger;
    cron: import("@strapi/types/dist/modules/cron").CronService;
    webhookRunner?: import("../../../services/webhook-runner").WebhookRunner | undefined;
    webhookStore?: import("@strapi/types/dist/modules/webhook-store").WebhookStore | undefined;
    store?: import("@strapi/types/dist/modules/core-store").CoreStore | undefined;
    entityValidator?: import("@strapi/types/dist/modules/entity-validator").EntityValidator | undefined;
    entityService?: import("@strapi/types/dist/modules/entity-service").EntityService | undefined;
    telemetry: import("@strapi/types/dist/modules/metrics").TelemetryService;
    requestContext: import("@strapi/types/dist/modules/request-context").RequestContext;
    customFields: import("@strapi/types/dist/modules/custom-fields").CustomFields;
    fetch: import("@strapi/types/dist/modules/fetch").Fetch;
    dirs: import("@strapi/types/dist/types/core/strapi").StrapiDirectories;
    admin?: import("@strapi/types/dist/types/core/common").Module | undefined;
    isLoaded: boolean;
    db?: import("@strapi/database").Database | undefined;
    app: any;
    EE?: boolean | undefined;
    components: import("@strapi/types/dist/types/shared").Components;
    reload: import("@strapi/types").Reloader;
    readonly config: any;
    readonly services: any;
    service(uid: import("@strapi/types/dist/types/core/common/uid").Service): any;
    readonly controllers: any;
    controller(uid: import("@strapi/types/dist/types/core/common/uid").Controller): any;
    readonly contentTypes: import("@strapi/types/dist/types/shared").ContentTypes;
    contentType(name: import("@strapi/types/dist/types/core/common/uid").ContentType): any;
    readonly policies: any;
    policy(name: string): any;
    readonly middlewares: any;
    middleware(name: string): any;
    readonly plugins: Record<string, import("@strapi/types/dist/types/core/common").Plugin>;
    plugin(name: string): import("@strapi/types/dist/types/core/common").Plugin;
    readonly hooks: any;
    hook(name: string): any;
    readonly api: Record<string, import("@strapi/types/dist/types/core/common").Module>;
    readonly auth: any;
    readonly contentAPI: any;
    readonly sanitizers: any;
    readonly validators: any;
    start(): Promise<any>;
    destroy(): Promise<void>;
    sendStartupTelemetry(): void;
    openAdmin({ isInitialized }: {
        isInitialized: boolean;
    }): Promise<void>;
    postListen(): Promise<void>;
    listen(): Promise<void>;
    stopWithError(err: unknown, customMessage?: string | undefined): never;
    stop(exitCode?: number): never;
    loadAdmin(): Promise<void>;
    loadPlugins(): Promise<void>;
    loadPolicies(): Promise<void>;
    loadAPIs(): Promise<void>;
    loadComponents(): Promise<void>;
    loadMiddlewares(): Promise<void>;
    loadApp(): Promise<void>;
    loadSanitizers(): Promise<void>;
    loadValidators(): Promise<void>;
    registerInternalHooks(): void;
    register(): Promise<any>;
    bootstrap(): Promise<any>;
    load(): Promise<any & Required<import("@strapi/types").Strapi>>;
    startWebhooks(): Promise<void>;
    runLifecyclesFunctions(lifecycleName: "destroy" | "register" | "bootstrap"): Promise<void>;
    getModel(uid: import("@strapi/types/dist/types/core/common/uid").ContentType): import("@strapi/types/dist/types/core/schemas").ContentType;
    getModel(uid: `${string}.${string}`): import("@strapi/types/dist/types/core/schemas").Component;
    query(uid: import("@strapi/types/dist/types/core/common/uid").Schema): import("@strapi/database").QueryFromContentType<import("@strapi/types/dist/types/core/common/uid").Schema>;
}>;
export default _default;
