import { PackageJson, ExtMap, Export } from '../utils/pkg';
import type { Logger } from '../utils/logger';
import type { Task } from './tasks';
interface BuildContextArgs {
    cwd: string;
    extMap: ExtMap;
    logger: Logger;
    pkg: PackageJson;
}
export type Target = 'node' | 'web' | '*';
export type Targets = {
    [target in Target]: string[];
};
export interface BuildContext {
    cwd: string;
    exports: Record<string, Export>;
    external: string[];
    extMap: ExtMap;
    logger: Logger;
    pkg: PackageJson;
    targets: Targets;
    distPath: string;
}
/**
 * @description Create a build context for the pipeline we're creating,
 * this is shared among tasks so they all use the same settings for core pieces
 * such as a target, distPath, externals etc.
 */
declare const createBuildContext: ({ cwd, extMap, logger, pkg, }: BuildContextArgs) => Promise<BuildContext>;
/**
 * @description Create the build tasks for the pipeline, this
 * comes from the exports map we've created in the build context.
 * But handles each export line uniquely with space to add more
 * as the standard develops.
 */
declare const createBuildTasks: (ctx: BuildContext) => Promise<Task[]>;
export { createBuildContext, createBuildTasks };
