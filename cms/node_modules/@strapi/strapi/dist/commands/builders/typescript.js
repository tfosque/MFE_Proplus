"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const typescript_utils_1 = __importDefault(require("@strapi/typescript-utils"));
const cleanupDistDirectory = async (distDir) => {
    if (!(await fs_extra_1.default.pathExists(distDir))) {
        return;
    }
    const dirContent = await fs_extra_1.default.readdir(distDir);
    const validFilenames = dirContent
        // Ignore the admin build folder
        .filter((filename) => filename !== 'build');
    for (const filename of validFilenames) {
        await fs_extra_1.default.remove(path_1.default.resolve(distDir, filename));
    }
};
exports.default = async ({ srcDir, distDir, ignoreDiagnostics = false, }) => {
    const isTSProject = await typescript_utils_1.default.isUsingTypeScript(srcDir);
    if (!isTSProject) {
        throw new Error(`tsconfig file not found in ${srcDir}`);
    }
    await cleanupDistDirectory(distDir);
    return typescript_utils_1.default.compile(srcDir, { configOptions: { ignoreDiagnostics } });
};
//# sourceMappingURL=typescript.js.map