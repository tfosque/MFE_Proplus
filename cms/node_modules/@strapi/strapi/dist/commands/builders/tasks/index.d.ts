import type { Ora } from 'ora';
import { DtsTask } from './dts';
import { ViteTask } from './vite';
import type { BuildContext } from '../packages';
export type Task = ViteTask | DtsTask;
export interface TaskHandler<TTask extends Task> {
    print: (ctx: BuildContext, task: TTask) => void;
    run: (ctx: BuildContext, task: TTask) => Promise<void>;
    success: (ctx: BuildContext, task: TTask) => Promise<void>;
    fail: (ctx: BuildContext, task: TTask, err: unknown) => Promise<void>;
    _spinner: Ora | null;
}
declare const buildTaskHandlers: <T extends DtsTask | ViteTask>(t: T) => TaskHandler<T>;
export { buildTaskHandlers };
