"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.viteTask = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
const path_1 = __importDefault(require("path"));
// @ts-ignore
const vite_1 = require("vite");
const plugin_react_1 = __importDefault(require("@vitejs/plugin-react"));
const ora_1 = __importDefault(require("ora"));
const chalk_1 = __importDefault(require("chalk"));
/**
 * @internal
 */
const resolveViteConfig = (ctx, task) => {
    const { cwd, distPath, targets, external, extMap, pkg } = ctx;
    const { entries, format, output, runtime } = task;
    const outputExt = extMap[pkg.type || 'commonjs'][format];
    const outDir = path_1.default.relative(cwd, distPath);
    const customLogger = (0, vite_1.createLogger)();
    customLogger.warn = (msg) => ctx.logger.warn(msg);
    customLogger.warnOnce = (msg) => ctx.logger.warn(msg);
    customLogger.error = (msg) => ctx.logger.error(msg);
    const config = {
        configFile: false,
        root: cwd,
        mode: 'production',
        logLevel: 'warn',
        clearScreen: false,
        customLogger,
        build: {
            sourcemap: true,
            /**
             * The task runner will clear this for us
             */
            emptyOutDir: false,
            target: targets[runtime],
            outDir,
            lib: {
                entry: entries.map((e) => e.entry).filter((v) => Boolean(v)),
                formats: [format],
                /**
                 * this enforces the file name to match what the output we've
                 * determined from the package.json exports.
                 */
                fileName() {
                    return `${path_1.default.relative(outDir, output).replace(/\.[^/.]+$/, '')}${outputExt}`;
                },
            },
            rollupOptions: {
                external,
                output: {
                    chunkFileNames() {
                        const parts = outputExt.split('.');
                        if (parts.length === 3) {
                            return `_chunks/[name]-[hash].${parts[2]}`;
                        }
                        return `_chunks/[name]-[hash]${outputExt}`;
                    },
                },
            },
        },
        /**
         * We _could_ omit this, but we'd need to introduce the
         * concept of a custom config for the scripts straight away
         *
         * and since this is isolated to the Strapi CLI, we can make
         * some assumptions and add some weight until we move it outside.
         */
        plugins: runtime === 'node' ? [] : [(0, plugin_react_1.default)()],
    };
    return config;
};
const viteTask = {
    _spinner: null,
    print(ctx, task) {
        const targetLines = [
            '   target:',
            ...ctx.targets[task.runtime].map((t) => chalk_1.default.cyan(`    - ${t}`)),
        ];
        const entries = [
            '   entries:',
            ...task.entries.map((entry) => [
                `    – `,
                chalk_1.default.green(`${path_1.default.join(ctx.pkg.name, entry.path)}: `),
                `${chalk_1.default.cyan(entry.entry)} ${chalk_1.default.gray('→')} ${chalk_1.default.cyan(task.output)}`,
            ].join('')),
        ];
        this._spinner = (0, ora_1.default)(`Building javascript files:\n`).start();
        ctx.logger.log([`  format: ${task.format}`, ...targetLines, ...entries].join('\n'));
    },
    async run(ctx, task) {
        try {
            const config = resolveViteConfig(ctx, task);
            ctx.logger.debug('Vite config: \n', config);
            await (0, vite_1.build)(config);
            await this.success(ctx, task);
        }
        catch (err) {
            this.fail(ctx, task, err);
        }
    },
    async success() {
        this._spinner?.succeed('Built javascript files');
    },
    async fail(ctx, task, err) {
        this._spinner?.fail('Failed to build javascript files');
        throw err;
    },
};
exports.viteTask = viteTask;
//# sourceMappingURL=vite.js.map