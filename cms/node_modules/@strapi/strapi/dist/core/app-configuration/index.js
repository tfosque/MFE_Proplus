"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-var-requires */
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const fp_1 = require("lodash/fp");
const dotenv_1 = __importDefault(require("dotenv"));
const config_loader_1 = __importDefault(require("./config-loader"));
dotenv_1.default.config({ path: process.env.ENV_PATH });
process.env.NODE_ENV = process.env.NODE_ENV || 'development';
const { version: strapiVersion } = require(path_1.default.join(__dirname, '../../../package.json'));
const defaultConfig = {
    server: {
        host: process.env.HOST || os_1.default.hostname() || 'localhost',
        port: process.env.PORT || 1337,
        proxy: false,
        cron: { enabled: false },
        admin: { autoOpen: false },
        dirs: { public: './public' },
    },
    admin: {},
    api: {
        rest: {
            prefix: '/api',
        },
    },
};
exports.default = (dirs, initialConfig = {}) => {
    const { app: appDir, dist: distDir } = dirs;
    const { autoReload = false, serveAdminPanel = true } = initialConfig;
    const pkgJSON = require(path_1.default.resolve(appDir, 'package.json'));
    const configDir = path_1.default.resolve(distDir || process.cwd(), 'config');
    const rootConfig = {
        launchedAt: Date.now(),
        serveAdminPanel,
        autoReload,
        environment: process.env.NODE_ENV,
        uuid: lodash_1.default.get(pkgJSON, 'strapi.uuid'),
        packageJsonStrapi: lodash_1.default.omit(lodash_1.default.get(pkgJSON, 'strapi', {}), 'uuid'),
        info: {
            ...pkgJSON,
            strapi: strapiVersion,
        },
    };
    const baseConfig = (0, fp_1.omit)('plugins', (0, config_loader_1.default)(configDir)); // plugin config will be loaded later
    const envDir = path_1.default.resolve(configDir, 'env', process.env.NODE_ENV);
    const envConfig = (0, config_loader_1.default)(envDir);
    return lodash_1.default.merge(rootConfig, defaultConfig, baseConfig, envConfig);
};
//# sourceMappingURL=index.js.map