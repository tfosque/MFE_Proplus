"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserPluginsConfig = void 0;
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const fp_1 = require("lodash/fp");
const load_config_file_1 = require("../../app-configuration/load-config-file");
/**
 * Return user defined plugins' config
 * first load config from `config/plugins.js`
 * and then merge config from `config/env/{env}/plugins.js`
 */
const getUserPluginsConfig = async () => {
    const globalUserConfigPath = (0, path_1.join)(strapi.dirs.dist.config, 'plugins.js');
    const currentEnvUserConfigPath = (0, path_1.join)(strapi.dirs.dist.config, 'env', process.env.NODE_ENV, 'plugins.js');
    let config = {};
    // assign global user config if exists
    if (await fs_extra_1.default.pathExists(globalUserConfigPath)) {
        config = (0, load_config_file_1.loadFile)(globalUserConfigPath);
    }
    // and merge user config by environment if exists
    if (await fs_extra_1.default.pathExists(currentEnvUserConfigPath)) {
        config = (0, fp_1.merge)(config, (0, load_config_file_1.loadFile)(currentEnvUserConfigPath));
    }
    return config;
};
exports.getUserPluginsConfig = getUserPluginsConfig;
//# sourceMappingURL=get-user-plugins-config.js.map