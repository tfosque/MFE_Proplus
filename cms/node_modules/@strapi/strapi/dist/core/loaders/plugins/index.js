"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const fp_1 = require("lodash/fp");
const utils_1 = require("@strapi/utils");
const load_config_file_1 = require("../../app-configuration/load-config-file");
const load_files_1 = __importDefault(require("../../../load/load-files"));
const get_enabled_plugins_1 = require("./get-enabled-plugins");
const get_user_plugins_config_1 = require("./get-user-plugins-config");
const defaultPlugin = {
    bootstrap() { },
    destroy() { },
    register() { },
    config: {
        default: {},
        validator() { },
    },
    routes: [],
    controllers: {},
    services: {},
    policies: {},
    middlewares: {},
    contentTypes: {},
};
const applyUserExtension = async (plugins) => {
    const extensionsDir = strapi.dirs.dist.extensions;
    if (!(await fs_extra_1.default.pathExists(extensionsDir))) {
        return;
    }
    const extendedSchemas = await (0, load_files_1.default)(extensionsDir, '**/content-types/**/schema.json');
    const strapiServers = await (0, load_files_1.default)(extensionsDir, '**/strapi-server.js');
    for (const pluginName of Object.keys(plugins)) {
        const plugin = plugins[pluginName];
        // first: load json schema
        for (const ctName of Object.keys(plugin.contentTypes)) {
            const extendedSchema = (0, fp_1.get)([pluginName, 'content-types', ctName, 'schema'], extendedSchemas);
            if (extendedSchema) {
                plugin.contentTypes[ctName].schema = {
                    ...plugin.contentTypes[ctName].schema,
                    ...extendedSchema,
                };
            }
        }
        // second: execute strapi-server extension
        const strapiServer = (0, fp_1.get)([pluginName, 'strapi-server'], strapiServers);
        if (strapiServer) {
            plugins[pluginName] = await strapiServer(plugin);
        }
    }
};
const applyUserConfig = async (plugins) => {
    const userPluginsConfig = await (0, get_user_plugins_config_1.getUserPluginsConfig)();
    for (const pluginName of Object.keys(plugins)) {
        const plugin = plugins[pluginName];
        const userPluginConfig = (0, fp_1.getOr)({}, `${pluginName}.config`, userPluginsConfig);
        const defaultConfig = typeof plugin.config.default === 'function'
            ? plugin.config.default({ env: utils_1.env })
            : plugin.config.default;
        const config = (0, fp_1.defaultsDeep)(defaultConfig, userPluginConfig);
        try {
            plugin.config.validator(config);
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error(`Error regarding ${pluginName} config: ${e.message}`);
            }
            throw e;
        }
        plugin.config = config;
    }
};
async function loadPlugins(strapi) {
    const plugins = {};
    const enabledPlugins = await (0, get_enabled_plugins_1.getEnabledPlugins)(strapi);
    strapi.config.set('enabledPlugins', enabledPlugins);
    for (const pluginName of Object.keys(enabledPlugins)) {
        const enabledPlugin = enabledPlugins[pluginName];
        let serverEntrypointPath;
        try {
            serverEntrypointPath = (0, path_1.join)(enabledPlugin.pathToPlugin, 'strapi-server.js');
        }
        catch (e) {
            throw new Error(`Error loading the plugin ${pluginName} because ${pluginName} is not installed. Please either install the plugin or remove it's configuration.`);
        }
        // only load plugins with a server entrypoint
        if (!(await fs_extra_1.default.pathExists(serverEntrypointPath))) {
            continue;
        }
        const pluginServer = (0, load_config_file_1.loadFile)(serverEntrypointPath);
        plugins[pluginName] = {
            ...defaultPlugin,
            ...pluginServer,
            config: (0, fp_1.defaults)(defaultPlugin.config, pluginServer.config),
            routes: pluginServer.routes ?? defaultPlugin.routes,
        };
    }
    // TODO: validate plugin format
    await applyUserConfig(plugins);
    await applyUserExtension(plugins);
    for (const pluginName of Object.keys(plugins)) {
        strapi.container.get('plugins').add(pluginName, plugins[pluginName]);
    }
}
exports.default = loadPlugins;
//# sourceMappingURL=index.js.map