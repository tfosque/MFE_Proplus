"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const lodash_1 = __importDefault(require("lodash"));
const fs_extra_1 = require("fs-extra");
const load_files_1 = __importDefault(require("../../load/load-files"));
async function loadComponents(strapi) {
    if (!(await (0, fs_extra_1.pathExists)(strapi.dirs.dist.components))) {
        return {};
    }
    const map = await (0, load_files_1.default)(strapi.dirs.dist.components, '*/*.*(js|json)');
    return Object.keys(map).reduce((acc, category) => {
        Object.keys(map[category]).forEach((key) => {
            const schema = map[category][key];
            if (!schema.collectionName) {
                // NOTE: We're using the filepath from the app directory instead of the dist for information purpose
                const filePath = (0, path_1.join)(strapi.dirs.app.components, category, schema.__filename__);
                return strapi.stopWithError(`Component ${key} is missing a "collectionName" property.\nVerify file ${filePath}.`);
            }
            const uid = `${category}.${key}`;
            acc[uid] = Object.assign(schema, {
                __schema__: lodash_1.default.cloneDeep(schema),
                uid,
                category,
                modelType: 'component',
                modelName: key,
                globalId: schema.globalId || lodash_1.default.upperFirst(lodash_1.default.camelCase(`component_${uid}`)),
            });
        });
        return acc;
    }, {});
}
exports.default = loadComponents;
//# sourceMappingURL=components.js.map