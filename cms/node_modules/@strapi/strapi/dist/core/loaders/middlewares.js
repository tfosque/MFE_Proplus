"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const utils_1 = require("@strapi/utils");
const middlewares_1 = require("../../middlewares");
// TODO:: allow folders with index.js inside for bigger policies
async function loadMiddlewares(strapi) {
    const localMiddlewares = await loadLocalMiddlewares(strapi);
    strapi.container.get('middlewares').add(`global::`, localMiddlewares);
    strapi.container.get('middlewares').add(`strapi::`, middlewares_1.middlewares);
}
exports.default = loadMiddlewares;
const loadLocalMiddlewares = async (strapi) => {
    const dir = strapi.dirs.dist.middlewares;
    if (!(await fs_extra_1.default.pathExists(dir))) {
        return {};
    }
    const middlewares = {};
    const paths = await fs_extra_1.default.readdir(dir, { withFileTypes: true });
    for (const fd of paths) {
        const { name } = fd;
        const fullPath = (0, path_1.join)(dir, name);
        if (fd.isFile() && (0, path_1.extname)(name) === '.js') {
            const key = (0, path_1.basename)(name, '.js');
            middlewares[key] = (0, utils_1.importDefault)(fullPath);
        }
    }
    return middlewares;
};
//# sourceMappingURL=middlewares.js.map