"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const utils_1 = require("../utils");
const servicesRegistry = (strapi) => {
    const services = {};
    const instantiatedServices = {};
    return {
        /**
         * Returns this list of registered services uids
         */
        keys() {
            return Object.keys(services);
        },
        /**
         * Returns the instance of a service. Instantiate the service if not already done
         */
        get(uid) {
            if (instantiatedServices[uid]) {
                return instantiatedServices[uid];
            }
            const service = services[uid];
            if (service) {
                instantiatedServices[uid] = typeof service === 'function' ? service({ strapi }) : service;
                return instantiatedServices[uid];
            }
        },
        /**
         * Returns a map with all the services in a namespace
         */
        getAll(namespace) {
            const filteredServices = (0, fp_1.pickBy)((_, uid) => (0, utils_1.hasNamespace)(uid, namespace))(services);
            // create lazy accessor to avoid instantiating the services;
            const map = {};
            for (const uid of Object.keys(filteredServices)) {
                Object.defineProperty(map, uid, {
                    enumerable: true,
                    get: () => {
                        return this.get(uid);
                    },
                });
            }
            return map;
        },
        /**
         * Registers a service
         */
        set(uid, service) {
            services[uid] = service;
            delete instantiatedServices[uid];
            return this;
        },
        /**
         * Registers a map of services for a specific namespace
         */
        add(namespace, newServices) {
            for (const serviceName of Object.keys(newServices)) {
                const service = newServices[serviceName];
                const uid = (0, utils_1.addNamespace)(serviceName, namespace);
                if ((0, fp_1.has)(uid, services)) {
                    throw new Error(`Service ${uid} has already been registered.`);
                }
                services[uid] = service;
            }
            return this;
        },
        /**
         * Wraps a service to extend it
         */
        extend(uid, extendFn) {
            const currentService = this.get(uid);
            if (!currentService) {
                throw new Error(`Service ${uid} doesn't exist`);
            }
            const newService = extendFn(currentService);
            instantiatedServices[uid] = newService;
            return this;
        },
    };
};
exports.default = servicesRegistry;
//# sourceMappingURL=services.js.map