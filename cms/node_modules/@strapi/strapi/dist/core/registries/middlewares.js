"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const utils_1 = require("../utils");
// TODO: move instantiation part here instead of in the server service
const middlewaresRegistry = () => {
    const middlewares = {};
    return {
        /**
         * Returns this list of registered middlewares uids
         */
        keys() {
            return Object.keys(middlewares);
        },
        /**
         * Returns the instance of a middleware. Instantiate the middleware if not already done
         */
        get(uid) {
            return middlewares[uid];
        },
        /**
         * Returns a map with all the middlewares in a namespace
         */
        getAll(namespace) {
            return (0, fp_1.pickBy)((_, uid) => (0, utils_1.hasNamespace)(uid, namespace))(middlewares);
        },
        /**
         * Registers a middleware
         */
        set(uid, middleware) {
            middlewares[uid] = middleware;
            return this;
        },
        /**
         * Registers a map of middlewares for a specific namespace
         */
        add(namespace, rawMiddlewares = {}) {
            for (const middlewareName of Object.keys(rawMiddlewares)) {
                const middleware = rawMiddlewares[middlewareName];
                const uid = (0, utils_1.addNamespace)(middlewareName, namespace);
                if ((0, fp_1.has)(uid, middlewares)) {
                    throw new Error(`Middleware ${uid} has already been registered.`);
                }
                middlewares[uid] = middleware;
            }
        },
        /**
         * Wraps a middleware to extend it
         */
        extend(uid, extendFn) {
            const currentMiddleware = this.get(uid);
            if (!currentMiddleware) {
                throw new Error(`Middleware ${uid} doesn't exist`);
            }
            const newMiddleware = extendFn(currentMiddleware);
            middlewares[uid] = newMiddleware;
            return this;
        },
    };
};
exports.default = middlewaresRegistry;
//# sourceMappingURL=middlewares.js.map