"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const utils_1 = require("@strapi/utils");
const get_fetch_params_1 = require("./get-fetch-params");
const { hasDraftAndPublish, constants: { PUBLISHED_AT_ATTRIBUTE }, } = utils_1.contentTypes;
const setPublishedAt = (data) => {
    data[PUBLISHED_AT_ATTRIBUTE] = (0, fp_1.propOr)(new Date(), PUBLISHED_AT_ATTRIBUTE, data);
};
/**
 * Returns a single type service to handle default core-api actions
 */
const createSingleTypeService = ({ contentType, }) => {
    const { uid } = contentType;
    return {
        getFetchParams: get_fetch_params_1.getFetchParams,
        /**
         * Returns singleType content
         */
        find(params = {}) {
            return (strapi.entityService?.findMany(uid, this.getFetchParams(params)) ??
                null);
        },
        /**
         * Creates or updates a singleType content
         *
         * @return {Promise}
         */
        async createOrUpdate({ data, ...params } = { data: {} }) {
            const entity = await this.find({ ...params, publicationState: 'preview' });
            if (!entity) {
                const count = await strapi.query(uid).count();
                if (count >= 1) {
                    throw new utils_1.errors.ValidationError('singleType.alreadyExists');
                }
                if (hasDraftAndPublish(contentType)) {
                    setPublishedAt(data);
                }
                return strapi.entityService?.create(uid, { ...params, data });
            }
            return strapi.entityService?.update(uid, entity.id, { ...params, data });
        },
        /**
         * Deletes the singleType content
         *
         * @return {Promise}
         */
        async delete(params = {}) {
            const entity = await this.find(params);
            if (!entity)
                return;
            return strapi.entityService?.delete(uid, entity.id);
        },
    };
};
exports.default = createSingleTypeService;
//# sourceMappingURL=single-type.js.map