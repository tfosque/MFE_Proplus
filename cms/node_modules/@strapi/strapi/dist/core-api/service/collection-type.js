"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const utils_1 = require("@strapi/utils");
const pagination_1 = require("./pagination");
const get_fetch_params_1 = require("./get-fetch-params");
const { hasDraftAndPublish, constants: { PUBLISHED_AT_ATTRIBUTE }, } = utils_1.contentTypes;
const setPublishedAt = (data) => {
    data[PUBLISHED_AT_ATTRIBUTE] = (0, fp_1.propOr)(new Date(), PUBLISHED_AT_ATTRIBUTE, data);
};
/**
 *
 * Returns a collection type service to handle default core-api actions
 */
const createCollectionTypeService = ({ contentType, }) => {
    const { uid } = contentType;
    return {
        getFetchParams: get_fetch_params_1.getFetchParams,
        async find(params = {}) {
            const fetchParams = this.getFetchParams(params);
            const paginationInfo = (0, pagination_1.getPaginationInfo)(fetchParams);
            const results = await strapi.entityService?.findMany(uid, {
                ...fetchParams,
                ...(0, pagination_1.convertPagedToStartLimit)(paginationInfo),
            });
            if ((0, pagination_1.shouldCount)(fetchParams)) {
                const count = await strapi.entityService?.count(uid, { ...fetchParams, ...paginationInfo });
                if (typeof count !== 'number') {
                    throw new Error('Count should be a number');
                }
                return {
                    results,
                    pagination: (0, pagination_1.transformPaginationResponse)(paginationInfo, count),
                };
            }
            return {
                results,
                pagination: paginationInfo,
            };
        },
        findOne(entityId, params = {}) {
            return strapi.entityService?.findOne(uid, entityId, this.getFetchParams(params));
        },
        create(params = { data: {} }) {
            const { data } = params;
            if (hasDraftAndPublish(contentType)) {
                setPublishedAt(data);
            }
            return strapi.entityService?.create(uid, { ...params, data });
        },
        update(entityId, params = { data: {} }) {
            const { data } = params;
            return strapi.entityService?.update(uid, entityId, { ...params, data });
        },
        delete(entityId, params = {}) {
            return strapi.entityService?.delete(uid, entityId, params);
        },
    };
};
exports.default = createCollectionTypeService;
//# sourceMappingURL=collection-type.js.map