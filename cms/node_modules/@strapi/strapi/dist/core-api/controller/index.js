"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createController = void 0;
const fp_1 = require("lodash/fp");
const utils_1 = require("@strapi/utils");
const transform_1 = require("./transform");
const single_type_1 = __importDefault(require("./single-type"));
const collection_type_1 = __importDefault(require("./collection-type"));
const isSingleType = (contentType) => utils_1.contentTypes.isSingleType(contentType);
const getAuthFromKoaContext = (ctx) => (0, fp_1.prop)('state.auth', ctx) ?? {};
function createController({ contentType, }) {
    const proto = {
        transformResponse(data, meta) {
            return (0, transform_1.transformResponse)(data, meta, { contentType });
        },
        async sanitizeOutput(data, ctx) {
            const auth = getAuthFromKoaContext(ctx);
            return utils_1.sanitize.contentAPI.output(data, contentType, { auth });
        },
        async sanitizeInput(data, ctx) {
            const auth = getAuthFromKoaContext(ctx);
            return utils_1.sanitize.contentAPI.input(data, contentType, { auth });
        },
        async sanitizeQuery(ctx) {
            const auth = getAuthFromKoaContext(ctx);
            return utils_1.sanitize.contentAPI.query(ctx.query, contentType, { auth });
        },
        async validateQuery(ctx) {
            const auth = getAuthFromKoaContext(ctx);
            return utils_1.validate.contentAPI.query(ctx.query, contentType, { auth });
        },
        async validateInput(data, ctx) {
            const auth = getAuthFromKoaContext(ctx);
            return utils_1.validate.contentAPI.input(data, contentType, { auth });
        },
    };
    let ctrl;
    if (isSingleType(contentType)) {
        ctrl = (0, single_type_1.default)({ contentType });
    }
    else {
        ctrl = (0, collection_type_1.default)({ contentType });
    }
    return Object.assign(Object.create(proto), ctrl);
}
exports.createController = createController;
//# sourceMappingURL=index.js.map