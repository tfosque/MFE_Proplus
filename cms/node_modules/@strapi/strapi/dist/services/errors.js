"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatInternalError = exports.formatHttpError = exports.formatApplicationError = void 0;
const http_errors_1 = __importDefault(require("http-errors"));
const utils_1 = require("@strapi/utils");
const mapErrorsAndStatus = [
    {
        classError: utils_1.errors.UnauthorizedError,
        status: 401,
    },
    {
        classError: utils_1.errors.ForbiddenError,
        status: 403,
    },
    {
        classError: utils_1.errors.NotFoundError,
        status: 404,
    },
    {
        classError: utils_1.errors.PayloadTooLargeError,
        status: 413,
    },
    {
        classError: utils_1.errors.RateLimitError,
        status: 429,
    },
    {
        classError: utils_1.errors.NotImplementedError,
        status: 501,
    },
];
const formatApplicationError = (error) => {
    const errorAndStatus = mapErrorsAndStatus.find((pair) => error instanceof pair.classError);
    const status = errorAndStatus ? errorAndStatus.status : 400;
    return {
        status,
        body: {
            data: null,
            error: {
                status,
                name: error.name,
                message: error.message,
                details: error.details,
            },
        },
    };
};
exports.formatApplicationError = formatApplicationError;
const formatHttpError = (error) => {
    return {
        status: error.status,
        body: {
            data: null,
            error: {
                status: error.status,
                name: error.name,
                message: error.message,
                details: error.details,
            },
        },
    };
};
exports.formatHttpError = formatHttpError;
const formatInternalError = (error) => {
    if (!(error instanceof Error)) {
        return formatHttpError((0, http_errors_1.default)(500));
    }
    const httpError = (0, http_errors_1.default)(error);
    if (httpError.expose) {
        return formatHttpError(httpError);
    }
    return formatHttpError((0, http_errors_1.default)(httpError.status || 500));
};
exports.formatInternalError = formatInternalError;
//# sourceMappingURL=errors.js.map