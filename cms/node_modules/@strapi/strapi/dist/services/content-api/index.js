"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const permissions_1 = __importDefault(require("./permissions"));
const transformRoutePrefixFor = (pluginName) => (route) => {
    const prefix = route.config && route.config.prefix;
    const path = prefix !== undefined ? `${prefix}${route.path}` : `/${pluginName}${route.path}`;
    return {
        ...route,
        path,
    };
};
const filterContentAPI = (route) => route.info.type === 'content-api';
/**
 * Create a content API container that holds logic, tools and utils. (eg: permissions, ...)
 */
const createContentAPI = (strapi) => {
    const getRoutesMap = async () => {
        const routesMap = {};
        lodash_1.default.forEach(strapi.api, (api, apiName) => {
            const routes = lodash_1.default.flatMap(api.routes, (route) => {
                if ('routes' in route) {
                    return route.routes;
                }
                return route;
            }).filter(filterContentAPI);
            if (routes.length === 0) {
                return;
            }
            const apiPrefix = strapi.config.get('api.rest.prefix');
            routesMap[`api::${apiName}`] = routes.map((route) => ({
                ...route,
                path: `${apiPrefix}${route.path}`,
            }));
        });
        lodash_1.default.forEach(strapi.plugins, (plugin, pluginName) => {
            const transformPrefix = transformRoutePrefixFor(pluginName);
            if (Array.isArray(plugin.routes)) {
                return plugin.routes.map(transformPrefix).filter(filterContentAPI);
            }
            const routes = lodash_1.default.flatMap(plugin.routes, (route) => route.routes.map(transformPrefix)).filter(filterContentAPI);
            if (routes.length === 0) {
                return;
            }
            const apiPrefix = strapi.config.get('api.rest.prefix');
            routesMap[`plugin::${pluginName}`] = routes.map((route) => ({
                ...route,
                path: `${apiPrefix}${route.path}`,
            }));
        });
        return routesMap;
    };
    return {
        permissions: (0, permissions_1.default)(strapi),
        getRoutesMap,
    };
};
exports.default = createContentAPI;
//# sourceMappingURL=index.js.map