"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const is_docker_1 = __importDefault(require("is-docker"));
const ci_info_1 = __importDefault(require("ci-info"));
const typescript_utils_1 = __importDefault(require("@strapi/typescript-utils"));
const utils_1 = require("@strapi/utils");
const machine_id_1 = __importDefault(require("../../utils/machine-id"));
const admin_user_hash_1 = require("./admin-user-hash");
const defaultQueryOpts = {
    timeout: 1000,
    headers: { 'Content-Type': 'application/json' },
};
const ANALYTICS_URI = 'https://analytics.strapi.io';
/**
 * Add properties from the package.json strapi key in the metadata
 */
const addPackageJsonStrapiMetadata = (metadata, strapi) => {
    const { packageJsonStrapi = {} } = strapi.config;
    lodash_1.default.defaults(metadata, packageJsonStrapi);
};
/**
 * Create a send function for event with all the necessary metadatas
 */
exports.default = (strapi) => {
    const { uuid } = strapi.config;
    const deviceId = (0, machine_id_1.default)();
    const serverRootPath = strapi.dirs.app.root;
    const adminRootPath = path_1.default.join(strapi.dirs.app.root, 'src', 'admin');
    const anonymousUserProperties = {
        environment: strapi.config.environment,
        os: os_1.default.type(),
        osPlatform: os_1.default.platform(),
        osArch: os_1.default.arch(),
        osRelease: os_1.default.release(),
        nodeVersion: process.versions.node,
    };
    const anonymousGroupProperties = {
        docker: process.env.DOCKER || (0, is_docker_1.default)(),
        isCI: ci_info_1.default.isCI,
        version: strapi.config.get('info.strapi'),
        useTypescriptOnServer: typescript_utils_1.default.isUsingTypeScriptSync(serverRootPath),
        useTypescriptOnAdmin: typescript_utils_1.default.isUsingTypeScriptSync(adminRootPath),
        projectId: uuid,
        isHostedOnStrapiCloud: (0, utils_1.env)('STRAPI_HOSTING', null) === 'strapi.cloud',
    };
    addPackageJsonStrapiMetadata(anonymousGroupProperties, strapi);
    return async (event, payload = {}, opts = {}) => {
        const userId = (0, admin_user_hash_1.generateAdminUserHash)(strapi);
        const reqParams = {
            method: 'POST',
            body: JSON.stringify({
                event,
                userId,
                deviceId,
                eventProperties: payload.eventProperties,
                userProperties: userId ? { ...anonymousUserProperties, ...payload.userProperties } : {},
                groupProperties: {
                    ...anonymousGroupProperties,
                    projectType: strapi.EE ? 'Enterprise' : 'Community',
                    ...payload.groupProperties,
                },
            }),
            ...lodash_1.default.merge({ headers: { 'X-Strapi-Event': event } }, defaultQueryOpts, opts),
        };
        try {
            const res = await strapi.fetch(`${ANALYTICS_URI}/api/v2/track`, reqParams);
            return res.ok;
        }
        catch (err) {
            return false;
        }
    };
};
//# sourceMappingURL=sender.js.map