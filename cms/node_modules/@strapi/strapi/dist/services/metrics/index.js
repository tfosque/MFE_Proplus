"use strict";
/**
 * Strapi telemetry package.
 * You can learn more at https://docs.strapi.io/developer-docs/latest/getting-started/usage-information.html
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_schedule_1 = require("node-schedule");
const rate_limiter_1 = __importDefault(require("./rate-limiter"));
const sender_1 = __importDefault(require("./sender"));
const middleware_1 = __importDefault(require("./middleware"));
const is_truthy_1 = __importDefault(require("./is-truthy"));
const LIMITED_EVENTS = [
    'didSaveMediaWithAlternativeText',
    'didSaveMediaWithCaption',
    'didDisableResponsiveDimensions',
    'didEnableResponsiveDimensions',
    'didInitializePluginUpload',
];
const createTelemetryInstance = (strapi) => {
    const uuid = strapi.config.get('uuid');
    const telemetryDisabled = strapi.config.get('packageJsonStrapi.telemetryDisabled');
    const isDisabled = !uuid || (0, is_truthy_1.default)(process.env.STRAPI_TELEMETRY_DISABLED) || (0, is_truthy_1.default)(telemetryDisabled);
    const crons = [];
    const sender = (0, sender_1.default)(strapi);
    const sendEvent = (0, rate_limiter_1.default)(sender, { limitedEvents: LIMITED_EVENTS });
    return {
        get isDisabled() {
            return isDisabled;
        },
        register() {
            if (!isDisabled) {
                const pingCron = (0, node_schedule_1.scheduleJob)('0 0 12 * * *', () => sendEvent('ping'));
                crons.push(pingCron);
                strapi.server.use((0, middleware_1.default)({ sendEvent }));
            }
        },
        bootstrap() { },
        destroy() {
            // Clear open handles
            crons.forEach((cron) => cron.cancel());
        },
        async send(event, payload = {}) {
            if (isDisabled)
                return true;
            return sendEvent(event, payload);
        },
    };
};
exports.default = createTelemetryInstance;
//# sourceMappingURL=index.js.map