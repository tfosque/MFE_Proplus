"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createServer = void 0;
const router_1 = __importDefault(require("@koa/router"));
const http_server_1 = require("./http-server");
const routing_1 = require("./routing");
const admin_api_1 = require("./admin-api");
const content_api_1 = require("./content-api");
const register_routes_1 = __importDefault(require("./register-routes"));
const register_middlewares_1 = __importDefault(require("./register-middlewares"));
const koa_1 = __importDefault(require("./koa"));
const request_context_1 = __importDefault(require("../request-context"));
const healthCheck = async (ctx) => {
    ctx.set('strapi', 'You are so French!');
    ctx.status = 204;
};
const createServer = (strapi) => {
    const app = (0, koa_1.default)({
        proxy: strapi.config.get('server.proxy'),
        keys: strapi.config.get('server.app.keys'),
    });
    app.use((ctx, next) => request_context_1.default.run(ctx, () => next()));
    const router = new router_1.default();
    const routeManager = (0, routing_1.createRouteManager)(strapi);
    const httpServer = (0, http_server_1.createHTTPServer)(strapi, app);
    const apis = {
        'content-api': (0, content_api_1.createContentAPI)(strapi),
        admin: (0, admin_api_1.createAdminAPI)(strapi),
    };
    // init health check
    router.all('/_health', healthCheck);
    const state = {
        mounted: false,
    };
    return {
        app,
        router,
        httpServer,
        api(name) {
            return apis[name];
        },
        use(...args) {
            app.use(...args);
            return this;
        },
        routes(routes) {
            if (!Array.isArray(routes) && routes.type) {
                const api = apis[routes.type];
                if (!api) {
                    throw new Error(`API ${routes.type} not found. Possible APIs are ${Object.keys(apis)}`);
                }
                apis[routes.type].routes(routes);
                return this;
            }
            routeManager.addRoutes(routes, router);
            return this;
        },
        mount() {
            state.mounted = true;
            Object.values(apis).forEach((api) => api.mount(router));
            app.use(router.routes()).use(router.allowedMethods());
            return this;
        },
        initRouting() {
            (0, register_routes_1.default)(strapi);
            return this;
        },
        async initMiddlewares() {
            await (0, register_middlewares_1.default)(strapi);
            return this;
        },
        listRoutes() {
            const allRoutes = [...router.stack];
            return allRoutes;
        },
        listen(...args) {
            if (!state.mounted) {
                this.mount();
            }
            return httpServer.listen(...args);
        },
        async destroy() {
            await httpServer.destroy();
        },
    };
};
exports.createServer = createServer;
//# sourceMappingURL=index.js.map