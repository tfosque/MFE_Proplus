"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const utils_1 = require("@strapi/utils");
const koa_compose_1 = __importDefault(require("koa-compose"));
const middleware_1 = require("./middleware");
const policy_1 = require("./policy");
const getMethod = (route) => {
    return (0, fp_1.trim)((0, fp_1.toLower)(route.method));
};
const getPath = (route) => (0, fp_1.trim)(route.path);
const createRouteInfoMiddleware = (routeInfo) => (ctx, next) => {
    const route = {
        ...routeInfo,
        config: routeInfo.config || {},
    };
    ctx.state.route = route;
    return next();
};
const getAuthConfig = (0, fp_1.prop)('config.auth');
const createAuthorizeMiddleware = (strapi) => async (ctx, next) => {
    const { auth, route } = ctx.state;
    const authService = strapi.container.get('auth');
    try {
        await authService.verify(auth, getAuthConfig(route));
        return await next();
    }
    catch (error) {
        if (error instanceof utils_1.errors.UnauthorizedError) {
            return ctx.unauthorized();
        }
        if (error instanceof utils_1.errors.ForbiddenError) {
            return ctx.forbidden();
        }
        throw error;
    }
};
const createAuthenticateMiddleware = (strapi) => async (ctx, next) => {
    return strapi.container.get('auth').authenticate(ctx, next);
};
const returnBodyMiddleware = async (ctx, next) => {
    const values = await next();
    if ((0, fp_1.isNil)(ctx.body) && !(0, fp_1.isNil)(values)) {
        ctx.body = values;
    }
};
exports.default = (strapi) => {
    const authenticate = createAuthenticateMiddleware(strapi);
    const authorize = createAuthorizeMiddleware(strapi);
    return (route, { router }) => {
        try {
            const method = getMethod(route);
            const path = getPath(route);
            const middlewares = (0, middleware_1.resolveRouteMiddlewares)(route, strapi);
            const policies = (0, policy_1.resolvePolicies)(route);
            const action = getAction(route, strapi);
            const routeHandler = (0, koa_compose_1.default)([
                createRouteInfoMiddleware(route),
                authenticate,
                authorize,
                ...policies,
                ...middlewares,
                returnBodyMiddleware,
                ...(0, fp_1.castArray)(action),
            ]);
            router[method](path, routeHandler);
        }
        catch (error) {
            if (error instanceof Error) {
                error.message = `Error creating endpoint ${route.method} ${route.path}: ${error.message}`;
            }
            throw error;
        }
    };
};
const getController = (name, { pluginName, apiName }, strapi) => {
    let ctrl;
    if (pluginName) {
        if (pluginName === 'admin') {
            ctrl = strapi.controller(`admin::${name}`);
        }
        else {
            ctrl = strapi.plugin(pluginName).controller(name);
        }
    }
    else if (apiName) {
        ctrl = strapi.controller(`api::${apiName}.${name}`);
    }
    if (!ctrl) {
        return strapi.controller(name);
    }
    return ctrl;
};
const extractHandlerParts = (name) => {
    const controllerName = name.slice(0, name.lastIndexOf('.'));
    const actionName = name.slice(name.lastIndexOf('.') + 1);
    return { controllerName, actionName };
};
const getAction = (route, strapi) => {
    const { handler, info } = route;
    const { pluginName, apiName, type } = info ?? {};
    if (Array.isArray(handler) || typeof handler === 'function') {
        return handler;
    }
    const { controllerName, actionName } = extractHandlerParts((0, fp_1.trim)(handler));
    const controller = getController(controllerName, { pluginName, apiName, type }, strapi);
    if (typeof controller[actionName] !== 'function') {
        throw new Error(`Handler not found "${handler}"`);
    }
    if (Symbol.for('__type__') in controller[actionName]) {
        controller[actionName][Symbol.for('__type__')].push(type);
    }
    else {
        controller[actionName][Symbol.for('__type__')] = [type];
    }
    return controller[actionName].bind(controller);
};
//# sourceMappingURL=compose-endpoint.js.map