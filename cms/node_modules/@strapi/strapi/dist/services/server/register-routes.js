"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const createRouteScopeGenerator = (namespace) => (route) => {
    const prefix = namespace.endsWith('::') ? namespace : `${namespace}.`;
    if (typeof route.handler === 'string') {
        lodash_1.default.defaultsDeep(route, {
            config: {
                auth: {
                    scope: [`${route.handler.startsWith(prefix) ? '' : prefix}${route.handler}`],
                },
            },
        });
    }
};
/**
 * Register all routes
 */
exports.default = (strapi) => {
    registerAdminRoutes(strapi);
    registerAPIRoutes(strapi);
    registerPluginRoutes(strapi);
};
/**
 * Register admin routes
 * @param {import('../../').Strapi} strapi
 */
const registerAdminRoutes = (strapi) => {
    const generateRouteScope = createRouteScopeGenerator(`admin::`);
    lodash_1.default.forEach(strapi.admin?.routes, (router) => {
        router.type = router.type || 'admin';
        router.prefix = router.prefix || `/admin`;
        router.routes.forEach((route) => {
            generateRouteScope(route);
            route.info = { pluginName: 'admin' };
        });
        strapi.server.routes(router);
    });
};
/**
 * Register plugin routes
 * @param {import('../../').Strapi} strapi
 */
const registerPluginRoutes = (strapi) => {
    for (const pluginName of Object.keys(strapi.plugins)) {
        const plugin = strapi.plugins[pluginName];
        const generateRouteScope = createRouteScopeGenerator(`plugin::${pluginName}`);
        if (Array.isArray(plugin.routes)) {
            plugin.routes.forEach((route) => {
                generateRouteScope(route);
                route.info = { pluginName };
            });
            strapi.server.routes({
                type: 'admin',
                prefix: `/${pluginName}`,
                routes: plugin.routes,
            });
        }
        else {
            lodash_1.default.forEach(plugin.routes, (router) => {
                router.type = router.type || 'admin';
                router.prefix = router.prefix || `/${pluginName}`;
                router.routes.forEach((route) => {
                    generateRouteScope(route);
                    route.info = { pluginName };
                });
                strapi.server.routes(router);
            });
        }
    }
};
/**
 * Register api routes
 */
const registerAPIRoutes = (strapi) => {
    for (const apiName of Object.keys(strapi.api)) {
        const api = strapi.api[apiName];
        const generateRouteScope = createRouteScopeGenerator(`api::${apiName}`);
        lodash_1.default.forEach(api.routes, (router) => {
            // TODO: remove once auth setup
            // pass meta down to compose endpoint
            router.type = 'content-api';
            router.routes?.forEach((route) => {
                generateRouteScope(route);
                route.info = { apiName };
            });
            return strapi.server.routes(router);
        });
    }
};
//# sourceMappingURL=register-routes.js.map