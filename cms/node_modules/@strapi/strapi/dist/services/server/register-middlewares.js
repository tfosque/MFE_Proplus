"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@strapi/utils");
const middleware_1 = require("./middleware");
const defaultConfig = [
    'strapi::errors',
    'strapi::security',
    'strapi::cors',
    'strapi::poweredBy',
    'strapi::session',
    'strapi::logger',
    'strapi::query',
    'strapi::body',
    'strapi::favicon',
    'strapi::public',
];
const requiredMiddlewares = [
    'strapi::errors',
    'strapi::security',
    'strapi::cors',
    'strapi::query',
    'strapi::body',
    'strapi::public',
    'strapi::favicon',
];
const middlewareConfigSchema = utils_1.yup.array().of(utils_1.yup.lazy((value) => {
    if (typeof value === 'string') {
        return utils_1.yup.string().required();
    }
    if (typeof value === 'object') {
        return utils_1.yup
            .object({
            name: utils_1.yup.string(),
            resolve: utils_1.yup.string(),
            config: utils_1.yup.mixed(),
        })
            .required()
            .noUnknown();
    }
    return utils_1.yup.mixed().test(() => false);
}) // FIXME: yup v1
);
/**
 * Register middlewares in router
 */
const registerApplicationMiddlewares = async (strapi) => {
    const middlewareConfig = strapi.config.get('middlewares', defaultConfig);
    await validateMiddlewareConfig(middlewareConfig);
    const middlewares = await (0, middleware_1.resolveMiddlewares)(middlewareConfig, strapi);
    checkRequiredMiddlewares(middlewares);
    // NOTE: exclude middlewares that return nothing.
    // this is used for middlewares that only extend the app only need to be added in certain conditions
    for (const middleware of middlewares) {
        strapi.server.use(middleware.handler);
    }
};
/**
 *
 * @param {MiddlewaresConfig} config
 */
const validateMiddlewareConfig = async (config) => {
    try {
        await middlewareConfigSchema.validate(config, { strict: true, abortEarly: false });
    }
    catch (error) {
        throw new Error('Invalid middleware configuration. Expected Array<string|{name?: string, resolve?: string, config: any}.');
    }
};
/**
 * Check if some required middlewares are missing in configure middlewares
 * @param {Middlewares} middlewares
 */
const checkRequiredMiddlewares = (middlewares) => {
    const missingMiddlewares = requiredMiddlewares.filter((name) => {
        return middlewares.findIndex((mdl) => mdl.name === name) === -1;
    });
    if (missingMiddlewares.length > 0) {
        throw new Error(`Missing required middlewares in configuration. Add the following middlewares: "${missingMiddlewares.join(', ')}".`);
    }
};
exports.default = registerApplicationMiddlewares;
//# sourceMappingURL=register-middlewares.js.map