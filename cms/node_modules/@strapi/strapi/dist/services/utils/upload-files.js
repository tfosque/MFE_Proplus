"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
/**
 * Upload files and link them to an entity
 */
const uploadFile = async (uid, entity, files) => {
    const modelDef = strapi.getModel(uid);
    if (!lodash_1.default.has(strapi.plugins, 'upload')) {
        return;
    }
    const uploadService = strapi.plugin('upload').service('upload');
    const findModelFromUploadPath = (path) => {
        if (path.length === 0) {
            return uid;
        }
        const currentPath = [];
        let tmpModel = modelDef;
        let modelUID = uid;
        for (let i = 0; i < path.length; i += 1) {
            if (!tmpModel) {
                return {};
            }
            const part = path[i];
            const attr = tmpModel.attributes[part];
            currentPath.push(part);
            // ignore array indexes => handled in the dynamic zone section
            if (lodash_1.default.isFinite(lodash_1.default.toNumber(path[i]))) {
                continue;
            }
            if (!attr)
                return {};
            if (attr.type === 'component') {
                modelUID = attr.component;
                tmpModel = strapi.components[attr.component];
            }
            else if (attr.type === 'dynamiczone') {
                const x = modelUID;
                const entryIdx = path[i + 1]; // get component index
                const value = lodash_1.default.get(entity, [...currentPath, entryIdx]);
                if (!value)
                    return {};
                modelUID = value.__component; // get component type
                tmpModel = strapi.components[modelUID];
            }
            else if (attr.type === 'relation') {
                if (!('target' in attr)) {
                    return {};
                }
                modelUID = attr.target;
                tmpModel = strapi.getModel(modelUID);
            }
            else {
                return;
            }
        }
        return modelUID;
    };
    const doUpload = async (key, files) => {
        const parts = key.split('.');
        const [path, field] = [lodash_1.default.initial(parts), lodash_1.default.last(parts)];
        const modelUID = findModelFromUploadPath(path);
        if (modelUID) {
            const id = lodash_1.default.get(entity, path.concat('id'));
            return uploadService.uploadToEntity({ id, model: modelUID, field }, files);
        }
    };
    await Promise.all(Object.keys(files).map((key) => doUpload(key, files[key])));
};
exports.default = uploadFile;
//# sourceMappingURL=upload-files.js.map