"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publicStatic = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const stream_1 = __importDefault(require("stream"));
const lodash_1 = __importDefault(require("lodash"));
const fp_1 = require("lodash/fp");
const koa_static_1 = __importDefault(require("koa-static"));
const utils = __importStar(require("../../utils"));
const serve_static_1 = require("./serve-static");
const defaults = {
    maxAge: 60000,
    defaultIndex: true,
};
const publicStatic = (config, { strapi }) => {
    const { defaultIndex, maxAge } = (0, fp_1.defaultsDeep)(defaults, config);
    if (defaultIndex === true) {
        const index = fs_1.default.readFileSync(path_1.default.join(__dirname, 'index.html'), 'utf8');
        const serveIndexPage = async (ctx, next) => {
            // defer rendering of strapi index page
            await next();
            if (ctx.body != null || ctx.status !== 404)
                return;
            ctx.url = 'index.html';
            const isInitialized = await utils.isInitialized(strapi);
            const data = {
                serverTime: new Date().toUTCString(),
                isInitialized,
                ...lodash_1.default.pick(strapi, [
                    'config.info.version',
                    'config.info.name',
                    'config.admin.url',
                    'config.server.url',
                    'config.environment',
                    'config.serveAdminPanel',
                ]),
            };
            const content = lodash_1.default.template(index)(data);
            const body = new stream_1.default.Readable({
                read() {
                    this.push(Buffer.from(content));
                    this.push(null);
                },
            });
            // Serve static.
            ctx.type = 'html';
            ctx.body = body;
        };
        strapi.server.routes([
            {
                method: 'GET',
                path: '/',
                handler: serveIndexPage,
                config: { auth: false },
            },
            {
                method: 'GET',
                path: '/index.html',
                handler: serveIndexPage,
                config: { auth: false },
            },
            {
                method: 'GET',
                path: '/assets/images/(.*)',
                handler: (0, serve_static_1.serveStatic)(path_1.default.resolve(__dirname, 'assets/images'), {
                    maxage: maxAge,
                    defer: true,
                }),
                config: { auth: false },
            },
            // All other public GET-routes except /uploads/(.*) which is handled in upload middleware
            {
                method: 'GET',
                path: '/((?!uploads/).+)',
                handler: (0, koa_static_1.default)(strapi.dirs.static.public, {
                    maxage: maxAge,
                    defer: true,
                }),
                config: { auth: false },
            },
        ]);
    }
};
exports.publicStatic = publicStatic;
//# sourceMappingURL=index.js.map