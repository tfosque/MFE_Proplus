"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cors = void 0;
const cors_1 = __importDefault(require("@koa/cors"));
const defaults = {
    origin: '*',
    maxAge: 31536000,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
    headers: ['Content-Type', 'Authorization', 'Origin', 'Accept'],
    keepHeadersOnError: false,
};
const cors = (config) => {
    const { origin, expose, maxAge, credentials, methods, headers, keepHeadersOnError } = {
        ...defaults,
        ...config,
    };
    if (config.enabled !== undefined) {
        strapi.log.warn('The strapi::cors middleware no longer supports the `enabled` option. Using it' +
            ' to conditionally enable CORS might cause an insecure default. To disable strapi::cors, remove it from' +
            ' the exported array in config/middleware.js');
    }
    return (0, cors_1.default)({
        async origin(ctx) {
            let originList;
            if (typeof origin === 'function') {
                originList = await origin(ctx);
            }
            else {
                originList = origin;
            }
            const whitelist = Array.isArray(originList) ? originList : originList.split(/\s*,\s*/);
            const requestOrigin = ctx.headers.origin ?? '';
            if (whitelist.includes('*')) {
                return credentials ? requestOrigin : '*';
            }
            if (!whitelist.includes(requestOrigin)) {
                return ctx.throw(`${requestOrigin} is not a valid origin`);
            }
            return requestOrigin;
        },
        exposeHeaders: expose,
        maxAge,
        credentials,
        allowMethods: methods,
        allowHeaders: headers,
        keepHeadersOnError,
    });
};
exports.cors = cors;
//# sourceMappingURL=cors.js.map