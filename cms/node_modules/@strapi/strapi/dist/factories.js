"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCoreRouter = exports.createCoreService = exports.createCoreController = void 0;
const fp_1 = require("lodash/fp");
const controller_1 = require("./core-api/controller");
const service_1 = require("./core-api/service");
const routes_1 = require("./core-api/routes");
// Content type is proxied to allow for dynamic content type updates
const getContentTypeProxy = (strapi, uid) => {
    return new Proxy(strapi.contentType(uid), {
        get(target, prop) {
            const contentType = strapi.contentType(uid);
            if (prop in contentType) {
                return contentType[prop];
            }
        },
    });
};
const createCoreController = (uid, cfg) => {
    return ({ strapi }) => {
        const baseController = (0, controller_1.createController)({ contentType: getContentTypeProxy(strapi, uid) });
        const userCtrl = typeof cfg === 'function' ? cfg({ strapi }) : cfg ?? {};
        for (const methodName of Object.keys(baseController)) {
            if (userCtrl[methodName] === undefined) {
                userCtrl[methodName] = baseController[methodName];
            }
        }
        Object.setPrototypeOf(userCtrl, baseController);
        return userCtrl;
    };
};
exports.createCoreController = createCoreController;
function createCoreService(uid, cfg) {
    return ({ strapi }) => {
        const baseService = (0, service_1.createService)({ contentType: getContentTypeProxy(strapi, uid) });
        const userService = typeof cfg === 'function' ? cfg({ strapi }) : cfg ?? {};
        for (const methodName of Object.keys(baseService)) {
            if (userService[methodName] === undefined) {
                userService[methodName] = baseService[methodName];
            }
        }
        Object.setPrototypeOf(userService, baseService);
        return userService;
    };
}
exports.createCoreService = createCoreService;
function createCoreRouter(uid, cfg) {
    const { prefix, config = {}, only, except, type = 'content-api' } = cfg ?? {};
    let routes;
    return {
        type,
        prefix,
        get routes() {
            if (!routes) {
                const contentType = strapi.contentType(uid);
                const defaultRoutes = (0, routes_1.createRoutes)({ contentType });
                const keys = Object.keys(defaultRoutes);
                keys.forEach((routeName) => {
                    const defaultRoute = defaultRoutes[routeName];
                    Object.assign(defaultRoute.config, config[routeName] || {});
                });
                const selectedRoutes = (0, fp_1.pipe)((routes) => (except ? (0, fp_1.omit)(except, routes) : routes), (routes) => (only ? (0, fp_1.pick)(only, routes) : routes))(defaultRoutes);
                routes = Object.values(selectedRoutes);
            }
            return routes;
        },
    };
}
exports.createCoreRouter = createCoreRouter;
//# sourceMappingURL=factories.js.map