"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const cli_table3_1 = __importDefault(require("cli-table3"));
const fp_1 = __importDefault(require("lodash/fp"));
const utils_1 = require("@strapi/utils");
exports.default = (app) => {
    return {
        logStats() {
            const columns = Math.min(process.stderr.columns, 80) - 2;
            console.log();
            console.log(chalk_1.default.black.bgWhite(fp_1.default.padEnd(columns, ' Project information')));
            console.log();
            const infoTable = new cli_table3_1.default({
                colWidths: [20, 50],
                chars: { mid: '', 'left-mid': '', 'mid-mid': '', 'right-mid': '' },
            });
            infoTable.push([chalk_1.default.blue('Time'), `${new Date()}`], [chalk_1.default.blue('Launched in'), `${Date.now() - app.config.launchedAt} ms`], [chalk_1.default.blue('Environment'), app.config.environment], [chalk_1.default.blue('Process PID'), process.pid], [chalk_1.default.blue('Version'), `${app.config.info.strapi} (node ${process.version})`], [chalk_1.default.blue('Edition'), app.EE ? 'Enterprise' : 'Community'], [chalk_1.default.blue('Database'), app.db?.dialect.client]);
            console.log(infoTable.toString());
            console.log();
            console.log(chalk_1.default.black.bgWhite(fp_1.default.padEnd(columns, ' Actions available')));
            console.log();
        },
        logFirstStartupMessage() {
            this.logStats();
            console.log(chalk_1.default.bold('One more thing...'));
            console.log(chalk_1.default.grey('Create your first administrator üíª by going to the administration panel at:'));
            console.log();
            const addressTable = new cli_table3_1.default();
            const adminUrl = (0, utils_1.getAbsoluteAdminUrl)(strapi.config);
            addressTable.push([chalk_1.default.bold(adminUrl)]);
            console.log(`${addressTable.toString()}`);
            console.log();
        },
        logDefaultStartupMessage() {
            this.logStats();
            console.log(chalk_1.default.bold('Welcome back!'));
            if (app.config.serveAdminPanel === true) {
                console.log(chalk_1.default.grey('To manage your project üöÄ, go to the administration panel at:'));
                const adminUrl = (0, utils_1.getAbsoluteAdminUrl)(strapi.config);
                console.log(chalk_1.default.bold(adminUrl));
                console.log();
            }
            console.log(chalk_1.default.grey('To access the server ‚ö°Ô∏è, go to:'));
            const serverUrl = (0, utils_1.getAbsoluteServerUrl)(strapi.config);
            console.log(chalk_1.default.bold(serverUrl));
            console.log();
        },
        logStartupMessage({ isInitialized }) {
            // Should the startup message be displayed?
            const hideStartupMessage = process.env.STRAPI_HIDE_STARTUP_MESSAGE
                ? process.env.STRAPI_HIDE_STARTUP_MESSAGE === 'true'
                : false;
            if (hideStartupMessage === false) {
                if (!isInitialized) {
                    this.logFirstStartupMessage();
                }
                else {
                    this.logDefaultStartupMessage();
                }
            }
        },
    };
};
//# sourceMappingURL=startup-logger.js.map