"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const package_json_1 = __importDefault(require("package-json"));
const configstore_1 = __importDefault(require("configstore"));
const semver_1 = __importDefault(require("semver"));
const boxen_1 = __importDefault(require("boxen"));
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("@strapi/utils");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pkg = require('../../../package.json');
const CHECK_INTERVAL = 1000 * 60 * 60 * 24 * 1; // 1 day
const NOTIF_INTERVAL = 1000 * 60 * 60 * 24 * 7; // 1 week
const boxenOptions = {
    padding: 1,
    margin: 1,
    align: 'center',
    borderColor: 'yellow',
    borderStyle: 'round',
};
const getUpdateMessage = (newVersion, currentVersion) => {
    const currentVersionLog = chalk_1.default.dim(currentVersion);
    const newVersionLog = chalk_1.default.green(newVersion);
    const releaseLink = chalk_1.default.bold('https://github.com/strapi/strapi/releases');
    return `
A new version of Strapi is available ${currentVersionLog} â†’ ${newVersionLog}
Check out the new releases at: ${releaseLink}
`.trim();
};
const createUpdateNotifier = (strapi) => {
    let config;
    try {
        config = new configstore_1.default(pkg.name, {}, { configPath: path_1.default.join(strapi.dirs.app.root, '.strapi-updater.json') });
    }
    catch {
        // we don't have write access to the file system
        // we silence the error
    }
    const checkUpdate = async (checkInterval) => {
        const now = Date.now();
        const lastUpdateCheck = config.get('lastUpdateCheck') || 0;
        if (lastUpdateCheck + checkInterval > now) {
            return;
        }
        try {
            const res = await (0, package_json_1.default)(pkg.name);
            if (res.version) {
                config.set('latest', res.version);
                config.set('lastUpdateCheck', now);
            }
        }
        catch {
            // silence error if offline
        }
    };
    const display = (notifInterval) => {
        const now = Date.now();
        const latestVersion = config.get('latest');
        const lastNotification = config.get('lastNotification') || 0;
        if (!process.stdout.isTTY ||
            lastNotification + notifInterval > now ||
            !semver_1.default.valid(latestVersion) ||
            !semver_1.default.valid(pkg.version) ||
            semver_1.default.lte(latestVersion, pkg.version)) {
            return;
        }
        const message = (0, boxen_1.default)(getUpdateMessage(latestVersion, pkg.version), boxenOptions);
        config.set('lastNotification', now);
        console.log(message);
    };
    return {
        notify({ checkInterval = CHECK_INTERVAL, notifInterval = NOTIF_INTERVAL } = {}) {
            if (utils_1.env.bool('STRAPI_DISABLE_UPDATE_NOTIFICATION', false) || !config) {
                return;
            }
            display(notifInterval);
            checkUpdate(checkInterval); // doesn't need to await
        },
    };
};
exports.default = createUpdateNotifier;
//# sourceMappingURL=index.js.map