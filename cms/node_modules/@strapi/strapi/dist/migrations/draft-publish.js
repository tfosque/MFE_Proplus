"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disable = exports.enable = void 0;
const utils_1 = require("@strapi/utils");
const enableDraftAndPublish = async ({ oldContentTypes, contentTypes }) => {
    if (!oldContentTypes) {
        return;
    }
    // run the after content types migrations
    for (const uid in contentTypes) {
        if (!oldContentTypes[uid]) {
            continue;
        }
        const oldContentType = oldContentTypes[uid];
        const contentType = contentTypes[uid];
        // if d&p was enabled set publishedAt to eq createdAt
        if (!utils_1.contentTypes.hasDraftAndPublish(oldContentType) &&
            utils_1.contentTypes.hasDraftAndPublish(contentType)) {
            const qb = strapi.db?.queryBuilder(uid);
            await qb
                .update({ published_at: qb.ref('created_at') })
                .where({ published_at: null })
                .execute();
        }
    }
};
exports.enable = enableDraftAndPublish;
const disableDraftAndPublish = async ({ oldContentTypes, contentTypes }) => {
    if (!oldContentTypes) {
        return;
    }
    for (const uid in contentTypes) {
        if (!oldContentTypes[uid]) {
            continue;
        }
        const oldContentType = oldContentTypes[uid];
        const contentType = contentTypes[uid];
        // if d&p was disabled remove unpublish content before sync
        if (utils_1.contentTypes.hasDraftAndPublish(oldContentType) &&
            !utils_1.contentTypes.hasDraftAndPublish(contentType)) {
            await strapi.db?.queryBuilder(uid).delete().where({ published_at: null }).execute();
        }
    }
};
exports.disable = disableDraftAndPublish;
//# sourceMappingURL=draft-publish.js.map