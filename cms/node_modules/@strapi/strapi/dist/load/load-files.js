"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const utils_1 = require("@strapi/utils");
const glob_1 = __importDefault(require("./glob"));
const filepath_to_prop_path_1 = __importDefault(require("./filepath-to-prop-path"));
/**
 * Returns an Object build from a list of files matching a glob pattern in a directory
 * It builds a tree structure resembling the folder structure in dir
 */
async function loadFiles(dir, pattern, { requireFn = utils_1.importDefault, shouldUseFileNameAsKey = (_) => true, globArgs = {} } = {}) {
    const root = {};
    const files = await (0, glob_1.default)(pattern, { cwd: dir, ...globArgs });
    for (const file of files) {
        const absolutePath = path_1.default.resolve(dir, file);
        // load module
        delete require.cache[absolutePath];
        let mod;
        if (path_1.default.extname(absolutePath) === '.json') {
            mod = await fs_extra_1.default.readJson(absolutePath);
        }
        else {
            mod = requireFn(absolutePath);
        }
        Object.defineProperty(mod, '__filename__', {
            enumerable: true,
            configurable: false,
            writable: false,
            value: path_1.default.basename(file),
        });
        const propPath = (0, filepath_to_prop_path_1.default)(file, shouldUseFileNameAsKey(file));
        if (propPath.length === 0)
            lodash_1.default.merge(root, mod);
        lodash_1.default.merge(root, lodash_1.default.setWith({}, propPath, mod, Object));
    }
    return root;
}
exports.default = loadFiles;
//# sourceMappingURL=load-files.js.map